"use strict";(self.webpackChunk_graphql_markdown_website=self.webpackChunk_graphql_markdown_website||[]).push([[1552],{4137:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>v});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=c(r),m=i,v=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(v,o(o({ref:t},s),{},{components:r})):n.createElement(v,o({ref:t},s))}));function v(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[d]="string"==typeof e?e:i,o[1]=p;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9273:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>p,toc:()=>c});var n=r(7462),i=(r(7294),r(4137));const a={title:"descriptor",pagination_prev:null,pagination_next:null,toc_max_heading_level:2},o=void 0,p={unversionedId:"helpers/directives/descriptor",id:"helpers/directives/descriptor",title:"descriptor",description:"Custom directive descriptor helper.",source:"@site/api/helpers/directives/descriptor.md",sourceDirName:"helpers/directives",slug:"/helpers/directives/descriptor",permalink:"/api/helpers/directives/descriptor",draft:!1,tags:[],version:"current",frontMatter:{title:"descriptor",pagination_prev:null,pagination_next:null,toc_max_heading_level:2},sidebar:"defaultSidebar"},l={},c=[{value:"See",id:"see",level:2},{value:"directiveDescriptor()",id:"directivedescriptor",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:3},{value:"Source",id:"source",level:3}],s={toc:c};function d(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Custom directive ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptor")," helper."),(0,i.kt)("h2",{id:"see"},"See"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://graphql-markdown.github.io/docs/advanced/custom-directive#descriptor"},"Option ",(0,i.kt)("inlineCode",{parentName:"a"},"customDirective.[directive].descriptor"))),(0,i.kt)("h2",{id:"directivedescriptor"},"directiveDescriptor()"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"directiveDescriptor(\n   directive, \n   type?, \n   descriptionTemplate?): string\n")),(0,i.kt)("p",null,"Helper for rendering custom description from schema directive on type.\nThis is an example on how to build a custom ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptor")," callback."),(0,i.kt)("h3",{id:"parameters"},"Parameters"),(0,i.kt)("p",null,"\u25aa ",(0,i.kt)("strong",{parentName:"p"},"directive"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"GraphQLDirective")),(0,i.kt)("p",null,"the schema directive to parse."),(0,i.kt)("p",null,"\u25aa ",(0,i.kt)("strong",{parentName:"p"},"type?"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"unknown")),(0,i.kt)("p",null,"the schema type to be processed for generating a custom description."),(0,i.kt)("p",null,"\u25aa ",(0,i.kt)("strong",{parentName:"p"},"descriptionTemplate?"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"string")),(0,i.kt)("p",null,"optional template literal-like string for rendering the description (see ",(0,i.kt)("a",{parentName:"p",href:"/api/helpers/utils/interpolate#interpolate"},"interpolate"),"), if not present then the directive description will be used."),(0,i.kt)("h3",{id:"returns"},"Returns"),(0,i.kt)("p",null,"a custom description based on directive value."),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { GraphQLDirective, GraphQLScalarType } from "graphql";\nimport { directiveDescriptor } from "@graphql-markdown/helpers/directives/descriptor";\n\nconst directive = new GraphQLDirective({\n  name: "version",\n  description: "Min version",\n  locations: [],\n  args: {\n    major: { type: GraphQLInt, defaultValue: 0 },\n    minor: { type: GraphQLInt, defaultValue: 0 },\n    patch: { type: GraphQLInt, defaultValue: 0 },\n  },\n});\n\nconst type = new GraphQLScalarType<string>({\n  name: "FooBar",\n  astNode: {\n    kind: Kind.SCALAR_TYPE_DEFINITION,\n    name: { kind: Kind.NAME, value: "FooBar" },\n    directives: [\n      {\n        kind: Kind.DIRECTIVE,\n        name: { kind: Kind.NAME, value: "version" },\n        arguments: [\n          {\n            kind: Kind.ARGUMENT,\n            name: { kind: Kind.NAME, value: "major" },\n            value: { kind: Kind.INT, value: "2" },\n          },\n          {\n            kind: Kind.ARGUMENT,\n            name: { kind: Kind.NAME, value: "minor" },\n            value: { kind: Kind.INT, value: "1" },\n          },\n          {\n            kind: Kind.ARGUMENT,\n            name: { kind: Kind.NAME, value: "patch" },\n            value: { kind: Kind.INT, value: "3" },\n          },\n        ],\n      },\n    ],\n  },\n});\n\ndirectiveDescriptor(directive, type, "${description} is ${major}.${minor}.${patch}");\n// Expected result: "Min version is 2.1.3"\n\ndirectiveDescriptor(directive, type);\n// Expected result: "Min version"\n\ndirectiveDescriptor(directive, type, "Version should be at least ^${major}.${minor}.${patch}");\n// Expected result: "Version should be at least ^2.1.3"\n')),(0,i.kt)("h3",{id:"source"},"Source"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/graphql-markdown/graphql-markdown/blob/fdeba50/packages/helpers/src/directives/descriptor.ts#L83"},"directives/descriptor.ts:83")))}d.isMDXComponent=!0}}]);