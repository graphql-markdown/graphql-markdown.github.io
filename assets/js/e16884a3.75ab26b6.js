"use strict";(self.webpackChunk_graphql_markdown_website=self.webpackChunk_graphql_markdown_website||[]).push([[5310],{4137:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>v});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),o=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=o(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=o(n),u=r,v=d["".concat(c,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(v,l(l({ref:t},s),{},{components:n})):a.createElement(v,l({ref:t},s))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p[d]="string"==typeof e?e:r,l[1]=p;for(var o=2;o<i;o++)l[o]=n[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1862:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>o});var a=n(7462),r=(n(7294),n(4137));const i={title:"directive",pagination_prev:null,pagination_next:null,toc_max_heading_level:2},l=void 0,p={unversionedId:"graphql/directive",id:"graphql/directive",title:"directive",description:"Library supporting customDirective for directive based customization.",source:"@site/api/graphql/directive.md",sourceDirName:"graphql",slug:"/graphql/directive",permalink:"/api/graphql/directive",draft:!1,tags:[],version:"current",frontMatter:{title:"directive",pagination_prev:null,pagination_next:null,toc_max_heading_level:2},sidebar:"defaultSidebar"},c={},o=[{value:"See",id:"see",level:2},{value:"WILDCARD_DIRECTIVE",id:"wildcard_directive",level:2},{value:"Defined In",id:"defined-in",level:3},{value:"getConstDirectiveMap",id:"getconstdirectivemap",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:3},{value:"Defined In",id:"defined-in-1",level:3},{value:"getCustomDirectiveOptions",id:"getcustomdirectiveoptions",level:2},{value:"Parameters",id:"parameters-1",level:3},{value:"Returns",id:"returns-1",level:3},{value:"Example",id:"example-1",level:3},{value:"Defined In",id:"defined-in-2",level:3},{value:"getCustomDirectives",id:"getcustomdirectives",level:2},{value:"Parameters",id:"parameters-2",level:3},{value:"Returns",id:"returns-2",level:3},{value:"Example",id:"example-2",level:3},{value:"Defined In",id:"defined-in-3",level:3},{value:"isCustomDirective",id:"iscustomdirective",level:2},{value:"Parameters",id:"parameters-3",level:3},{value:"Returns",id:"returns-3",level:3},{value:"Defined In",id:"defined-in-4",level:3}],s={toc:o};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Library supporting ",(0,r.kt)("inlineCode",{parentName:"p"},"customDirective")," for directive based customization."),(0,r.kt)("h2",{id:"see"},"See"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://graphql-markdown.github.io/docs/advanced/custom-directive"},"Option ",(0,r.kt)("inlineCode",{parentName:"a"},"customDirective"))),(0,r.kt)("h2",{id:"wildcard_directive"},"WILDCARD","_","DIRECTIVE"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const WILDCARD_DIRECTIVE: ""\n')),(0,r.kt)("p",null,"Wildcard ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," character for matching any directive name."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/api/graphql/directive#getcustomdirectiveoptions"},"getCustomDirectiveOptions"),", ",(0,r.kt)("a",{parentName:"p",href:"/api/graphql/directive#iscustomdirective"},"isCustomDirective")),(0,r.kt)("h3",{id:"defined-in"},"Defined In"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphql-markdown/graphql-markdown/blob/4b6fd2a/packages/graphql/src/directive.ts#L28"},"packages/graphql/src/directive.ts:28")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getconstdirectivemap"},"getConstDirectiveMap"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"getConstDirectiveMap(entity, customDirectiveMap): Maybe< CustomDirectiveMap >\n")),(0,r.kt)("p",null,"Returns a map of custom directives for a schema entity."),(0,r.kt)("h3",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"entity")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"unknown")),(0,r.kt)("td",{parentName:"tr",align:"left"},"a GraphQL schema entity.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"customDirectiveMap")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Maybe"),"\\< ",(0,r.kt)("inlineCode",{parentName:"td"},"CustomDirectiveMap")," ",">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"a custom directive map (see ",(0,r.kt)("a",{parentName:"td",href:"/api/graphql/directive#getcustomdirectives"},"getCustomDirectives"),").")))),(0,r.kt)("h3",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Maybe"),"\\< ",(0,r.kt)("inlineCode",{parentName:"p"},"CustomDirectiveMap")," ",">"),(0,r.kt)("p",null,"a map of GraphQL directives matching the custom directives defined, else ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { buildSchema } from "graphql";\nimport { getConstDirectiveMap } from "@graphql-markdown/utils/directive";\n\nconst schema = buildSchema(`\n    directive @testA(\n      arg: ArgEnum = ARGA\n    ) on OBJECT | FIELD_DEFINITION\n\n    directive @testB(\n      argA: Int!,\n      argB: [String!]\n    ) on FIELD_DEFINITION\n\n    enum ArgEnum {\n      ARGA\n      ARGB\n      ARGC\n    }\n\n    type Test @testA {\n      id: ID!\n      fieldA: [String!]\n        @testA(arg: ARGC)\n        @testB(argA: 10, argB: ["testArgB"])\n    }\n\n    type TestWithoutDirective {\n      id: ID!\n    }\n  `);\n\nconst customDirectives = {\n  testA: {\n    type: schema.getDirective("testA"),\n    descriptor: (_, constDirectiveType) => `${constDirectiveType.name}`;\n  },\n};\n\nconst map = getConstDirectiveMap(schema.getType("Test"), customDirectives);\n// Expected result: {\n//   "descriptor": (_, constDirectiveType) => `${constDirectiveType.name}`,\n//   "type": schema.getDirective("testA"),\n// }\n\n')),(0,r.kt)("h3",{id:"defined-in-1"},"Defined In"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphql-markdown/graphql-markdown/blob/4b6fd2a/packages/graphql/src/directive.ts#L247"},"packages/graphql/src/directive.ts:247")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getcustomdirectiveoptions"},"getCustomDirectiveOptions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"getCustomDirectiveOptions(schemaDirectiveName, customDirectiveOptions): Maybe< CustomDirectiveOptions >\n")),(0,r.kt)("p",null,"Returns a record set of custom handlers from a directive by name."),(0,r.kt)("h3",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"schemaDirectiveName")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"DirectiveName")),(0,r.kt)("td",{parentName:"tr",align:"left"},"the GraphQL directive name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"customDirectiveOptions")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"CustomDirective")),(0,r.kt)("td",{parentName:"tr",align:"left"},"the ",(0,r.kt)("inlineCode",{parentName:"td"},"customDirective")," option.")))),(0,r.kt)("h3",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Maybe"),"\\< ",(0,r.kt)("inlineCode",{parentName:"p"},"CustomDirectiveOptions")," ",">"),(0,r.kt)("p",null,"a record set of custom handlers for the matching directive (or if ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," is declared), or undefined if no match."),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { getCustomDirectiveOptions } from "@graphql-markdown/utils/directive";\n\nconst customDirectiveOptions = {\n  "*": {\n    descriptor: (_, constDirectiveType) => `Wildcard ${constDirectiveType.name}`;\n  },\n};\n\nconst customDirectives = getCustomDirectiveOptions("testB", customDirectiveOptions);\n\n// Expected result: {\n//   "descriptor": (_, constDirectiveType) => `Wildcard ${constDirectiveType.name}`,\n//   "type": "@testB",\n// }\n')),(0,r.kt)("h3",{id:"defined-in-2"},"Defined In"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphql-markdown/graphql-markdown/blob/4b6fd2a/packages/graphql/src/directive.ts#L157"},"packages/graphql/src/directive.ts:157")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"getcustomdirectives"},"getCustomDirectives"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"getCustomDirectives(schemaMap, customDirectiveOptions?): Maybe< CustomDirectiveMap >\n")),(0,r.kt)("p",null,"Returns a custom directives map with custom handlers from ",(0,r.kt)("inlineCode",{parentName:"p"},"customDirective"),"."),(0,r.kt)("h3",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"schemaMap")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Pick"),"\\< ",(0,r.kt)("inlineCode",{parentName:"td"},"SchemaMap"),", ",(0,r.kt)("inlineCode",{parentName:"td"},'"directives"')," ",">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"the GraphQL schema map returned by ",(0,r.kt)("a",{parentName:"td",href:"/api/graphql/introspection#getschemamap"},"getSchemaMap"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"customDirectiveOptions"),"?"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"CustomDirective")),(0,r.kt)("td",{parentName:"tr",align:"left"},"the ",(0,r.kt)("inlineCode",{parentName:"td"},"customDirective")," option.")))),(0,r.kt)("h3",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Maybe"),"\\< ",(0,r.kt)("inlineCode",{parentName:"p"},"CustomDirectiveMap")," ",">"),(0,r.kt)("p",null,"a custom directive map, or undefined if no match."),(0,r.kt)("h3",{id:"example-2"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { buildSchema } from "graphql";\nimport { getCustomDirectives } from "@graphql-markdown/utils/directive";\n\nconst schema = buildSchema(`\n  directive @testA(\n    arg: ArgEnum = ARGA\n  ) on OBJECT | FIELD_DEFINITION\n  directive @testB(\n    argA: Int!,\n    argB: [String!]\n  ) on FIELD_DEFINITION\n  enum ArgEnum {\n    ARGA\n    ARGB\n    ARGC\n  }\n`);\n\nconst schemaMap = {\n  directives: {\n    testA: schema.getDirective("testA"),\n    testB: schema.getDirective("testB"),\n  },\n};\n\nconst customDirectiveOptions = {\n  testA: {\n    descriptor: (_, constDirectiveType) => `Named directive ${constDirectiveType.name}`;\n  },\n  "*": {\n    descriptor: (_, constDirectiveType) => `Wildcard ${constDirectiveType.name}`;\n  },\n};\n\nconst customDirectives = getCustomDirectives(schemaMap, customDirectiveOptions);\n\n// Expected result: {\n//   "testA": {\n//     "descriptor": (_, constDirectiveType) => `Named directive ${constDirectiveType.name}`,\n//     "type": "@testA",\n//   },\n//   "testB": {\n//     "descriptor": (_, constDirectiveType) => `Wildcard ${constDirectiveType.name}`,\n//     "type": "@testB",\n//   },\n// }\n')),(0,r.kt)("h3",{id:"defined-in-3"},"Defined In"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphql-markdown/graphql-markdown/blob/4b6fd2a/packages/graphql/src/directive.ts#L89"},"packages/graphql/src/directive.ts:89")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"iscustomdirective"},"isCustomDirective"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"isCustomDirective(schemaDirectiveName, customDirectiveOptions): boolean\n")),(0,r.kt)("p",null,"Checks if a directive name is referenced in ",(0,r.kt)("inlineCode",{parentName:"p"},"customDirective")," option."),(0,r.kt)("h3",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"schemaDirectiveName")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"DirectiveName")),(0,r.kt)("td",{parentName:"tr",align:"left"},"the GraphQL directive name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"customDirectiveOptions")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"CustomDirective")),(0,r.kt)("td",{parentName:"tr",align:"left"},"the ",(0,r.kt)("inlineCode",{parentName:"td"},"customDirective")," option.")))),(0,r.kt)("h3",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the directive is declared or ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," is declared in ",(0,r.kt)("inlineCode",{parentName:"p"},"customDirective")," option, else ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("h3",{id:"defined-in-4"},"Defined In"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphql-markdown/graphql-markdown/blob/4b6fd2a/packages/graphql/src/directive.ts#L181"},"packages/graphql/src/directive.ts:181")))}d.isMDXComponent=!0}}]);