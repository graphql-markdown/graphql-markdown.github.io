"use strict";(self.webpackChunk_graphql_markdown_website=self.webpackChunk_graphql_markdown_website||[]).push([["9448"],{47254:function(e,n,a){a.r(n),a.d(n,{default:()=>o,frontMatter:()=>h,metadata:()=>r,assets:()=>c,toc:()=>l,contentTitle:()=>d});var r=JSON.parse('{"id":"diff","title":"diff","description":"Latest Version","source":"@site/api/diff.md","sourceDirName":".","slug":"/diff","permalink":"/api/diff","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"diff","pagination_prev":null,"pagination_next":null,"toc_max_heading_level":2},"sidebar":"defaultSidebar"}'),s=a("85893"),i=a("50065");let h={title:"diff",pagination_prev:null,pagination_next:null,toc_max_heading_level:2},d="@graphql-markdown/diff",c={},l=[{value:"CompareMethod",id:"comparemethod",level:2},{value:"Enumeration Members",id:"enumeration-members",level:3},{value:"DIFF",id:"diff",level:4},{value:"FORCE",id:"force",level:4},{value:"HASH",id:"hash",level:4},{value:"NONE",id:"none",level:4},{value:"checkSchemaChanges",id:"checkschemachanges",level:2},{value:"Param",id:"param",level:3},{value:"Param",id:"param-1",level:3},{value:"Param",id:"param-2",level:3},{value:"Returns",id:"returns",level:3},{value:"SCHEMA_HASH_FILE",id:"schema_hash_file",level:2},{value:"SCHEMA_REF",id:"schema_ref",level:2},{value:"getDiff()",id:"getdiff",level:2},{value:"Parameters",id:"parameters",level:3},{value:"schemaNew",id:"schemanew",level:4},{value:"schemaOldLocation",id:"schemaoldlocation",level:4},{value:"Returns",id:"returns-1",level:3},{value:"getSchemaHash()",id:"getschemahash",level:2},{value:"Parameters",id:"parameters-1",level:3},{value:"schema",id:"schema",level:4},{value:"Returns",id:"returns-2",level:3}];function t(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"graphql-markdowndiff",children:"@graphql-markdown/diff"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.npmjs.com/package/@graphql-markdown/diff",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/npm/v/@graphql-markdown/diff?style=flat",alt:"Latest Version"})}),"\n",(0,s.jsx)(n.a,{href:"https://raw.githubusercontent.com/graphql-markdown/graphql-markdown/main/LICENSE",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/github/license/graphql-markdown/graphql-markdown?style=flat",alt:"GitHub License"})}),"\n",(0,s.jsx)(n.a,{href:"https://sonarcloud.io/summary/new_code?id=graphql-markdown_diff",children:(0,s.jsx)(n.img,{src:"https://sonarcloud.io/api/project_badges/measure?project=graphql-markdown_diff&metric=sqale_index",alt:"Technical Debt"})}),"\n",(0,s.jsx)(n.a,{href:"https://sonarcloud.io/summary/new_code?id=graphql-markdown_diff",children:(0,s.jsx)(n.img,{src:"https://sonarcloud.io/api/project_badges/measure?project=graphql-markdown_diff&metric=coverage",alt:"Coverage"})}),"\n",(0,s.jsx)(n.a,{href:"https://dashboard.stryker-mutator.io/reports/github.com/graphql-markdown/graphql-markdown/main?module=diff",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/endpoint?label=mutation%20score&style=flat&url=https%3A%2F%2Fbadge-api.stryker-mutator.io%2Fgithub.com%2Fgraphql-markdown%2Fgraphql-markdown%2Fmain%3Fmodule%3Ddiff",alt:"Mutation Score"})})]}),"\n",(0,s.jsx)(n.p,{children:"Schema comparison module for GraphQL Markdown.\nProvides utilities to compare GraphQL schemas and detect changes."}),"\n",(0,s.jsx)(n.h2,{id:"comparemethod",children:"CompareMethod"}),"\n",(0,s.jsx)(n.p,{children:"Defined in: index.ts:32"}),"\n",(0,s.jsx)(n.p,{children:"Comparison methods used to determine if a schema has changed."}),"\n",(0,s.jsx)(n.h3,{id:"enumeration-members",children:"Enumeration Members"}),"\n",(0,s.jsx)(n.h4,{id:"diff",children:"DIFF"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'DIFF: "SCHEMA-DIFF";\n'})}),"\n",(0,s.jsx)(n.p,{children:"Defined in: index.ts:34"}),"\n",(0,s.jsx)(n.p,{children:"Compare schemas by diffing the content"}),"\n",(0,s.jsx)(n.h4,{id:"force",children:"FORCE"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'FORCE: "FORCE";\n'})}),"\n",(0,s.jsx)(n.p,{children:"Defined in: index.ts:38"}),"\n",(0,s.jsx)(n.p,{children:"Force regeneration regardless of changes"}),"\n",(0,s.jsx)(n.h4,{id:"hash",children:"HASH"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'HASH: "SCHEMA-HASH";\n'})}),"\n",(0,s.jsx)(n.p,{children:"Defined in: index.ts:36"}),"\n",(0,s.jsx)(n.p,{children:"Compare schemas by comparing hash values"}),"\n",(0,s.jsx)(n.h4,{id:"none",children:"NONE"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'NONE: "NONE";\n'})}),"\n",(0,s.jsx)(n.p,{children:"Defined in: index.ts:40"}),"\n",(0,s.jsx)(n.p,{children:"Skip comparison and assume no changes"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"checkschemachanges",children:"checkSchemaChanges"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const checkSchemaChanges: FunctionCheckSchemaChanges;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Defined in: index.ts:80"}),"\n",(0,s.jsx)(n.p,{children:"Checks if a schema has changed compared to a previous version.\nUses either diff or hash-based comparison methods based on the method parameter."}),"\n",(0,s.jsx)(n.h3,{id:"param",children:"Param"}),"\n",(0,s.jsx)(n.p,{children:"The current GraphQL schema"}),"\n",(0,s.jsx)(n.h3,{id:"param-1",children:"Param"}),"\n",(0,s.jsx)(n.p,{children:"Directory where schema or hash files will be saved"}),"\n",(0,s.jsx)(n.h3,{id:"param-2",children:"Param"}),"\n",(0,s.jsx)(n.p,{children:"Comparison method to use (defaults to DIFF)"}),"\n",(0,s.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:"A promise resolving to a boolean indicating whether the schema has changed"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"schema_hash_file",children:"SCHEMA_HASH_FILE"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const SCHEMA_HASH_FILE: ".schema";\n'})}),"\n",(0,s.jsx)(n.p,{children:"Defined in: index.ts:25"}),"\n",(0,s.jsx)(n.p,{children:"File name for storing schema hash"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"schema_ref",children:"SCHEMA_REF"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const SCHEMA_REF: "schema.graphql";\n'})}),"\n",(0,s.jsx)(n.p,{children:"Defined in: index.ts:27"}),"\n",(0,s.jsx)(n.p,{children:"File name for storing schema reference"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"getdiff",children:"getDiff()"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"function getDiff(schemaNew, schemaOldLocation): Promise<Change<any>[]>;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Defined in: index.ts:61"}),"\n",(0,s.jsx)(n.p,{children:"Compares a new schema against an existing schema file and returns the differences."}),"\n",(0,s.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsx)(n.h4,{id:"schemanew",children:"schemaNew"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"GraphQLSchema"})}),"\n",(0,s.jsx)(n.p,{children:"The new GraphQL schema to compare"}),"\n",(0,s.jsx)(n.h4,{id:"schemaoldlocation",children:"schemaOldLocation"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"string"})}),"\n",(0,s.jsx)(n.p,{children:"File path to the old schema"}),"\n",(0,s.jsx)(n.h3,{id:"returns-1",children:"Returns"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Promise"}),"<",(0,s.jsx)(n.code,{children:"Change"}),"<",(0,s.jsx)(n.code,{children:"any"}),">[]>"]}),"\n",(0,s.jsx)(n.p,{children:"A promise resolving to an array of schema changes"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"getschemahash",children:"getSchemaHash()"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"function getSchemaHash(schema): string;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Defined in: index.ts:49"}),"\n",(0,s.jsx)(n.p,{children:"Generates a SHA-256 hash for a GraphQL schema."}),"\n",(0,s.jsx)(n.h3,{id:"parameters-1",children:"Parameters"}),"\n",(0,s.jsx)(n.h4,{id:"schema",children:"schema"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"GraphQLSchema"})}),"\n",(0,s.jsx)(n.p,{children:"The GraphQL schema to generate a hash for"}),"\n",(0,s.jsx)(n.h3,{id:"returns-2",children:"Returns"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"string"})}),"\n",(0,s.jsx)(n.p,{children:"A SHA-256 hash string representing the schema"})]})}function o(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}},50065:function(e,n,a){a.d(n,{Z:function(){return d},a:function(){return h}});var r=a(67294);let s={},i=r.createContext(s);function h(e){let n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:h(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);