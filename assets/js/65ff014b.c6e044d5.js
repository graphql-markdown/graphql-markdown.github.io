"use strict";(self.webpackChunk_graphql_markdown_website=self.webpackChunk_graphql_markdown_website||[]).push([["1138"],{43537:function(e,n,t){t.r(n),t.d(n,{default:()=>p,frontMatter:()=>s,metadata:()=>i,assets:()=>a,toc:()=>d,contentTitle:()=>o});var i=JSON.parse('{"id":"printer-legacy/relation","title":"relation","description":"This module provides functionality to print relationships between GraphQL types,","source":"@site/api/printer-legacy/relation.md","sourceDirName":"printer-legacy","slug":"/printer-legacy/relation","permalink":"/api/printer-legacy/relation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"relation","pagination_prev":null,"pagination_next":null,"toc_max_heading_level":2},"sidebar":"defaultSidebar"}'),r=t("85893"),l=t("50065");let s={title:"relation",pagination_prev:null,pagination_next:null,toc_max_heading_level:2},o=void 0,a={},d=[{value:"getRootTypeLocaleFromString()",id:"getroottypelocalefromstring",level:2},{value:"Parameters",id:"parameters",level:3},{value:"text",id:"text",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:3},{value:"printRelationOf()",id:"printrelationof",level:2},{value:"Type Parameters",id:"type-parameters",level:3},{value:"T",id:"t",level:4},{value:"Parameters",id:"parameters-1",level:3},{value:"type",id:"type",level:4},{value:"section",id:"section",level:4},{value:"getRelation",id:"getrelation",level:4},{value:"options",id:"options",level:4},{value:"Returns",id:"returns-1",level:3},{value:"Throws",id:"throws",level:3},{value:"Example",id:"example-1",level:3},{value:"printRelations()",id:"printrelations",level:2},{value:"Parameters",id:"parameters-2",level:3},{value:"type",id:"type-1",level:4},{value:"options",id:"options-1",level:4},{value:"Returns",id:"returns-2",level:3},{value:"Throws",id:"throws-1",level:3},{value:"Example",id:"example-2",level:3}];function c(e){let n={code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",p:"p",pre:"pre",...(0,l.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This module provides functionality to print relationships between GraphQL types,\nincluding return types, member fields, and implementations, in a formatted MDX string output."}),"\n",(0,r.jsx)(n.h2,{id:"getroottypelocalefromstring",children:"getRootTypeLocaleFromString()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function getRootTypeLocaleFromString(text): Maybe<TypeLocale>\n"})}),"\n",(0,r.jsx)(n.p,{children:"Defined in: relation.ts:40"}),"\n",(0,r.jsx)(n.p,{children:"Converts a string representation of a root type to its corresponding TypeLocale"}),"\n",(0,r.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(n.h4,{id:"text",children:"text"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"string"})}),"\n",(0,r.jsx)(n.p,{children:"The string to convert to a TypeLocale"}),"\n",(0,r.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Maybe"}),"<",(0,r.jsx)(n.code,{children:"TypeLocale"}),">"]}),"\n",(0,r.jsx)(n.p,{children:"The matching TypeLocale if found, undefined otherwise"}),"\n",(0,r.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const locale = getRootTypeLocaleFromString('Query');\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"printrelationof",children:"printRelationOf()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function printRelationOf<T>(\n   type, \n   section, \n   getRelation, \n   options): string | MDXString\n"})}),"\n",(0,r.jsx)(n.p,{children:"Defined in: relation.ts:65"}),"\n",(0,r.jsx)(n.p,{children:"Prints the relation section for a specific type and relation category"}),"\n",(0,r.jsx)(n.h3,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,r.jsx)(n.h4,{id:"t",children:"T"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"T"})}),"\n",(0,r.jsx)(n.p,{children:"Type of the relation"}),"\n",(0,r.jsx)(n.h3,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsx)(n.h4,{id:"type",children:"type"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"unknown"})}),"\n",(0,r.jsx)(n.p,{children:"The GraphQL type to get relations for"}),"\n",(0,r.jsx)(n.h4,{id:"section",children:"section"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"unknown"})}),"\n",(0,r.jsx)(n.p,{children:"The section title for the relation"}),"\n",(0,r.jsx)(n.h4,{id:"getrelation",children:"getRelation"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Maybe"}),"<",(0,r.jsx)(n.code,{children:"IGetRelation"}),"<",(0,r.jsx)(n.code,{children:"T"}),">>"]}),"\n",(0,r.jsx)(n.p,{children:"Function to retrieve relations of type T"}),"\n",(0,r.jsx)(n.h4,{id:"options",children:"options"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"PrintTypeOptions"})}),"\n",(0,r.jsx)(n.p,{children:"Printing options for type formatting"}),"\n",(0,r.jsx)(n.h3,{id:"returns-1",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"string"})," | ",(0,r.jsx)(n.code,{children:"MDXString"})]}),"\n",(0,r.jsx)(n.p,{children:"Formatted MDX string containing the relations or empty string if no relations found"}),"\n",(0,r.jsx)(n.h3,{id:"throws",children:"Throws"}),"\n",(0,r.jsx)(n.p,{children:"If the schema is not provided in options"}),"\n",(0,r.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'const mdx = printRelationOf(type, "Member Of", getRelationOfField, options);\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"printrelations",children:"printRelations()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function printRelations(type, options): string | MDXString\n"})}),"\n",(0,r.jsx)(n.p,{children:"Defined in: relation.ts:134"}),"\n",(0,r.jsx)(n.p,{children:"Prints all relations (return types, member fields, and implementations) for a given type"}),"\n",(0,r.jsx)(n.h3,{id:"parameters-2",children:"Parameters"}),"\n",(0,r.jsx)(n.h4,{id:"type-1",children:"type"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"unknown"})}),"\n",(0,r.jsx)(n.p,{children:"The GraphQL type to get all relations for"}),"\n",(0,r.jsx)(n.h4,{id:"options-1",children:"options"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"PrintTypeOptions"})}),"\n",(0,r.jsx)(n.p,{children:"Printing options for type formatting"}),"\n",(0,r.jsx)(n.h3,{id:"returns-2",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"string"})," | ",(0,r.jsx)(n.code,{children:"MDXString"})]}),"\n",(0,r.jsx)(n.p,{children:"Formatted MDX string containing all relations or empty string if no relations found"}),"\n",(0,r.jsx)(n.h3,{id:"throws-1",children:"Throws"}),"\n",(0,r.jsx)(n.p,{children:"If the schema is not provided in options"}),"\n",(0,r.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'const relations = printRelations(myType, { schema, formatMDXBullet: () => "* " });\n'})})]})}function p(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return o},a:function(){return s}});var i=t(67294);let r={},l=i.createContext(r);function s(e){let n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);