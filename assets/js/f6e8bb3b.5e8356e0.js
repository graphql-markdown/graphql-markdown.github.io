"use strict";(self.webpackChunk_graphql_markdown_website=self.webpackChunk_graphql_markdown_website||[]).push([["5319"],{85982:function(e,n,r){r.r(n),r.d(n,{default:()=>p,frontMatter:()=>l,metadata:()=>i,assets:()=>d,toc:()=>a,contentTitle:()=>s});var i=JSON.parse('{"id":"core/printer","title":"printer","description":"getPrinter()","source":"@site/api/core/printer.md","sourceDirName":"core","slug":"/core/printer","permalink":"/api/core/printer","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"printer","pagination_prev":null,"pagination_next":null,"toc_max_heading_level":2},"sidebar":"defaultSidebar"}'),t=r("85893"),o=r("50065");let l={title:"printer",pagination_prev:null,pagination_next:null,toc_max_heading_level:2},s=void 0,d={},a=[{value:"getPrinter()",id:"getprinter",level:2},{value:"Parameters",id:"parameters",level:3},{value:"printerModule?",id:"printermodule",level:4},{value:"config?",id:"config",level:4},{value:"options?",id:"options",level:4},{value:"mdxModule?",id:"mdxmodule",level:4},{value:"Returns",id:"returns",level:3},{value:"Throws",id:"throws",level:3},{value:"Throws",id:"throws-1",level:3},{value:"Throws",id:"throws-2",level:3},{value:"Example",id:"example",level:3}];function c(e){let n={code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"getprinter",children:"getPrinter()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"function getPrinter(\n   printerModule?, \n   config?, \n   options?, \nmdxModule?): Promise<typeof IPrinter>\n"})}),"\n",(0,t.jsx)(n.p,{children:"Defined in: printer.ts:60"}),"\n",(0,t.jsx)(n.p,{children:"Loads and initializes a printer module for GraphQL schema documentation."}),"\n",(0,t.jsx)(n.p,{children:"This function dynamically imports the specified printer module and initializes it\nwith the provided configuration and options. The printer is responsible for rendering\nGraphQL schema documentation in the desired format."}),"\n",(0,t.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsx)(n.h4,{id:"printermodule",children:"printerModule?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Maybe"}),"<",(0,t.jsx)(n.code,{children:"PackageName"}),">"]}),"\n",(0,t.jsx)(n.p,{children:"The name/path of the printer module to load"}),"\n",(0,t.jsx)(n.h4,{id:"config",children:"config?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Maybe"}),"<",(0,t.jsx)(n.code,{children:"PrinterConfig"}),">"]}),"\n",(0,t.jsx)(n.p,{children:"Configuration for the printer including schema, baseURL, and linkRoot"}),"\n",(0,t.jsx)(n.h4,{id:"options",children:"options?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Maybe"}),"<",(0,t.jsx)(n.code,{children:"PrinterOptions"}),">"]}),"\n",(0,t.jsx)(n.p,{children:"Additional options for customizing the printer's behavior"}),"\n",(0,t.jsx)(n.h4,{id:"mdxmodule",children:"mdxModule?"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"unknown"})}),"\n",(0,t.jsx)(n.p,{children:"Optional MDX module for MDX-specific functionality"}),"\n",(0,t.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Promise"}),"<",(0,t.jsx)(n.em,{children:"typeof"})," ",(0,t.jsx)(n.code,{children:"IPrinter"}),">"]}),"\n",(0,t.jsx)(n.p,{children:"A promise that resolves to the initialized Printer instance"}),"\n",(0,t.jsx)(n.h3,{id:"throws",children:"Throws"}),"\n",(0,t.jsx)(n.p,{children:"Will throw an error if printerModule is not a string"}),"\n",(0,t.jsx)(n.h3,{id:"throws-1",children:"Throws"}),"\n",(0,t.jsx)(n.p,{children:"Will throw an error if config is not provided"}),"\n",(0,t.jsx)(n.h3,{id:"throws-2",children:"Throws"}),"\n",(0,t.jsx)(n.p,{children:"Will throw an error if the module specified by printerModule cannot be found"}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { getPrinter } from '@graphql-markdown/core';\nimport { buildSchema } from 'graphql';\n\nconst schema = buildSchema(`\n  type Query {\n    hello: String\n  }\n`);\n\nconst printer = await getPrinter(\n  '@graphql-markdown/printer-legacy',\n  {\n    schema,\n    baseURL: '/docs',\n    linkRoot: 'graphql'\n  },\n  {\n    printTypeOptions: { includeDeprecationReasons: true }\n  }\n);\n\nconst output = printer.printSchema();\n"})})]})}function p(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},50065:function(e,n,r){r.d(n,{Z:function(){return s},a:function(){return l}});var i=r(67294);let t={},o=i.createContext(t);function l(e){let n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);