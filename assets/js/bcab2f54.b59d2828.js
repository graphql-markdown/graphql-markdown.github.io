"use strict";(self.webpackChunk_graphql_markdown_website=self.webpackChunk_graphql_markdown_website||[]).push([["3174"],{33137:function(e,n,i){i.r(n),i.d(n,{default:()=>o,frontMatter:()=>l,metadata:()=>s,assets:()=>a,toc:()=>h,contentTitle:()=>t});var s=JSON.parse('{"id":"core/diff","title":"diff","description":"Schema","source":"@site/api/core/diff.md","sourceDirName":"core","slug":"/core/diff","permalink":"/api/core/diff","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"diff","pagination_prev":null,"pagination_next":null,"toc_max_heading_level":2},"sidebar":"defaultSidebar"}'),r=i("85893"),d=i("50065");let l={title:"diff",pagination_prev:null,pagination_next:null,toc_max_heading_level:2},t=void 0,a={},h=[{value:"Schema",id:"schema",level:2},{value:"hasChanges()",id:"haschanges",level:3},{value:"Parameters",id:"parameters",level:4},{value:"schema",id:"schema-1",level:5},{value:"tmpDir",id:"tmpdir",level:5},{value:"diffMethod",id:"diffmethod",level:5},{value:"diffModule",id:"diffmodule",level:5},{value:"Returns",id:"returns",level:4},{value:"Examples",id:"examples",level:4},{value:"Throws",id:"throws",level:4},{value:"See",id:"see",level:4},{value:"Since",id:"since",level:4}];function c(e){let n={code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"schema",children:"Schema"}),"\n",(0,r.jsx)(n.h3,{id:"haschanges",children:"hasChanges()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function hasChanges(\n   schema, \n   tmpDir, \n   diffMethod, \ndiffModule): Promise<boolean>\n"})}),"\n",(0,r.jsx)(n.p,{children:"Defined in: diff.ts:62"}),"\n",(0,r.jsx)(n.p,{children:"Determines if there are changes in the GraphQL schema by using a specified diff method and module."}),"\n",(0,r.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(n.h5,{id:"schema-1",children:"schema"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"GraphQLSchema"})}),"\n",(0,r.jsx)(n.p,{children:"The GraphQL schema to check for changes."}),"\n",(0,r.jsx)(n.h5,{id:"tmpdir",children:"tmpDir"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"string"})}),"\n",(0,r.jsx)(n.p,{children:"The temporary directory to store intermediate files during the diff process."}),"\n",(0,r.jsx)(n.h5,{id:"diffmethod",children:"diffMethod"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Maybe"}),"<",(0,r.jsx)(n.code,{children:"DiffMethodName"}),">"]}),"\n",(0,r.jsxs)(n.p,{children:["The name of the diff method to use. Must be a string or ",(0,r.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,r.jsx)(n.h5,{id:"diffmodule",children:"diffModule"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Maybe"}),"<",(0,r.jsx)(n.code,{children:"string"}),"> = ",(0,r.jsx)(n.code,{children:'"@graphql-markdown/diff"'})]}),"\n",(0,r.jsxs)(n.p,{children:["The module to import for performing the diff. Defaults to ",(0,r.jsx)(n.code,{children:"@graphql-markdown/diff"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Promise"}),"<",(0,r.jsx)(n.code,{children:"boolean"}),">"]}),"\n",(0,r.jsxs)(n.p,{children:["A promise that resolves to ",(0,r.jsx)(n.code,{children:"true"})," if changes are detected or if the diff method/module is invalid, otherwise ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.h4,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { hasChanges } from "./diff";\nimport { buildSchema } from "graphql";\n\nconst schema = buildSchema(`\n  type Query {\n    hello: String\n  }\n`);\n\nconst changesDetected = await hasChanges(schema, "/tmp", "methodName");\nconsole.log(changesDetected); // true or false\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { hasChanges } from "./diff";\n\nconst schema = getMySchema();\nconst result = await hasChanges(\n  schema,\n  "/tmp/schema-diff",\n  "breaking",\n  "./my-custom-diff-module"\n);\n'})}),"\n",(0,r.jsx)(n.h4,{id:"throws",children:"Throws"}),"\n",(0,r.jsx)(n.p,{children:"Will log a warning if the specified diff module cannot be found."}),"\n",(0,r.jsx)(n.h4,{id:"see",children:"See"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"DiffMethodName for available diff methods"}),"\n",(0,r.jsx)(n.li,{children:"FunctionCheckSchemaChanges for the signature of the function imported from the diff module"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"since",children:"Since"}),"\n",(0,r.jsx)(n.p,{children:"1.0.0"})]})}function o(e={}){let{wrapper:n}={...(0,d.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},50065:function(e,n,i){i.d(n,{Z:function(){return t},a:function(){return l}});var s=i(67294);let r={},d=s.createContext(r);function l(e){let n=s.useContext(d);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);