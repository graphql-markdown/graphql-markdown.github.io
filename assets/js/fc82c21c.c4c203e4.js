"use strict";(self.webpackChunk_graphql_markdown_website=self.webpackChunk_graphql_markdown_website||[]).push([["7694"],{2107:function(n,e,t){t.r(e),t.d(e,{default:()=>m,frontMatter:()=>i,metadata:()=>a,assets:()=>c,toc:()=>l,contentTitle:()=>s});var a=JSON.parse('{"id":"advanced/integration-with-frameworks","title":"Integration with Frameworks","description":"This guide provides examples for integrating GraphQL-Markdown with popular documentation frameworks.","source":"@site/docs/advanced/integration-with-frameworks.md","sourceDirName":"advanced","slug":"/advanced/integration-with-frameworks","permalink":"/docs/advanced/integration-with-frameworks","draft":false,"unlisted":false,"editUrl":"https://github.com/graphql-markdown/graphql-markdown/tree/main/docs/advanced/integration-with-frameworks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Homepage","permalink":"/docs/advanced/homepage"},"next":{"title":"Schema loading","permalink":"/docs/advanced/schema-loading"}}'),r=t("85893"),o=t("50065");let i={},s="Integration with Frameworks",c={},l=[{value:"General Integration Approach",id:"general-integration-approach",level:2},{value:"Basic Integration Example",id:"basic-integration-example",level:3},{value:"Framework-Specific Integration",id:"framework-specific-integration",level:2},{value:"Docusaurus",id:"docusaurus",level:3},{value:"Astro Starlight",id:"astro-starlight",level:3},{value:"Next.js with Fumadocs",id:"nextjs-with-fumadocs",level:3},{value:"Vocs",id:"vocs",level:3}];function d(n){let e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"integration-with-frameworks",children:"Integration with Frameworks"})}),"\n",(0,r.jsx)(e.p,{children:"This guide provides examples for integrating GraphQL-Markdown with popular documentation frameworks."}),"\n",(0,r.jsx)(e.h2,{id:"general-integration-approach",children:"General Integration Approach"}),"\n",(0,r.jsx)(e.p,{children:"Most documentation frameworks allow you to generate documentation during the build process. You can integrate GraphQL-Markdown by creating a script that runs before your documentation build."}),"\n",(0,r.jsx)(e.h3,{id:"basic-integration-example",children:"Basic Integration Example"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"import { runGraphQLMarkdown } from '@graphql-markdown/cli';\n\nconst config = {\n  schema: './schema.graphql',\n  rootPath: './docs',\n};\n\nawait runGraphQLMarkdown(config);\n"})}),"\n",(0,r.jsx)(e.h2,{id:"framework-specific-integration",children:"Framework-Specific Integration"}),"\n",(0,r.jsx)(e.h3,{id:"docusaurus",children:"Docusaurus"}),"\n",(0,r.jsx)(e.p,{children:"The official Docusaurus integration is available as a dedicated package:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"const path = require('node:path');\n\nmodule.exports = {\n  // ... other docusaurus config\n  plugins: [\n    [\n      '@graphql-markdown/docusaurus',\n      {\n        schema: path.join(__dirname, 'schema.graphql'),\n        rootPath: path.join(__dirname, 'docs'),\n        baseURL: 'api',\n      },\n    ],\n  ],\n};\n"})}),"\n",(0,r.jsxs)(e.p,{children:["For more details, check the ",(0,r.jsx)(e.a,{href:"https://github.com/graphql-markdown/graphql-markdown/tree/main/packages/docusaurus",children:"@graphql-markdown/docusaurus"})," package."]}),"\n",(0,r.jsx)(e.h3,{id:"astro-starlight",children:"Astro Starlight"}),"\n",(0,r.jsx)(e.p,{children:"For Astro Starlight integration, implement a custom MDX parser:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'// src/modules/astro-mdx.cjs\nconst mdxDeclaration = `\nimport { Aside, Badge } from \'@astrojs/starlight/components\';\n`;\n\nconst formatMDXAdmonition = (\n  { text, title, type },\n  meta,\n) => {\n  const asideType = type === "warning" ? "caution" : "note";\n  return `<Aside type="${asideType}" title="${title}">${text}</Aside>`;\n};\n\nconst formatMDXBadge = ({ text, classname }) => {\n  const variant = classname === "DEPRECATED" ? \'caution\' : \'default\';\n  return `<Badge variant="${variant}" text="${text}"/>`;\n};\n\nmodule.exports = {\n  mdxDeclaration,\n  formatMDXAdmonition,\n  formatMDXBadge,\n};\n'})}),"\n",(0,r.jsxs)(e.p,{children:["See complete implementation: ",(0,r.jsx)(e.a,{href:"https://github.com/graphql-markdown/demo-astro-starlight",children:"demo-astro-starlight"})]}),"\n",(0,r.jsx)(e.h3,{id:"nextjs-with-fumadocs",children:"Next.js with Fumadocs"}),"\n",(0,r.jsx)(e.p,{children:"For Next.js using Fumadocs, implement a custom MDX parser:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'// lib/fumadocs-mdx.cjs\nconst mdxDeclaration = `\nimport { Heading } from \'fumadocs-ui/components/heading\';\nimport { Callout } from \'fumadocs-ui/components/callout\';\nimport Chip from \'@mui/material/Chip\';\n`;\n\nconst formatMDXAdmonition = (\n  { text, title, type },\n  meta,\n) => {\n  const asideType = type === "warning" ? "warn" : "info";\n  return `<Callout type="${asideType}" title="${title}">${text}</Callout>`;\n};\n\nconst formatMDXBadge = ({ text, classname }) => {\n  const color = classname === "DEPRECATED" ? \'warning\' : \'info\';\n  return `<Chip color="${color}" label="${text}" size="small" variant="outlined"/>`;\n};\n\nmodule.exports = {\n  mdxDeclaration,\n  formatMDXAdmonition,\n  formatMDXBadge,\n};\n'})}),"\n",(0,r.jsxs)(e.p,{children:["See complete implementation: ",(0,r.jsx)(e.a,{href:"https://github.com/graphql-markdown/demo-nextjs-fumadocs",children:"demo-nextjs-fumadocs"})]}),"\n",(0,r.jsx)(e.h3,{id:"vocs",children:"Vocs"}),"\n",(0,r.jsx)(e.p,{children:"For Vocs integration, implement a custom MDX parser:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'// lib/vocs-mdx.cjs\nconst mdxDeclaration = `\nimport Chip from \'@mui/material/Chip\';\n\nexport const Bullet = () => <><span style={{ fontWeight: \'normal\', fontSize: \'.5em\' }}>&nbsp;\u25CF&nbsp;</span></>\n`;\n\nconst formatMDXAdmonition = (\n  { text, title, type },\n  meta,\n) => {\n  const calloutType = type === "warning" ? "warning" : "info";\n  return `:::${calloutType}[${title}]${text}:::`;\n};\n\nconst formatMDXBadge = ({ text, classname }) => {\n  const color = classname === "DEPRECATED" ? \'warning\' : \'info\';\n  return `<Chip color="${color}" label="${text}" size="small" variant="outlined"/>`;\n};\n\nconst formatMDXBullet = (text = "") => {\n  return `<Bullet/>${text}`;\n};\n\nmodule.exports = {\n  mdxDeclaration,\n  formatMDXAdmonition,\n  formatMDXBadge,\n  formatMDXBullet\n};\n'})}),"\n",(0,r.jsxs)(e.p,{children:["See complete implementation: ",(0,r.jsx)(e.a,{href:"https://github.com/graphql-markdown/demo-vite-vocs",children:"demo-vite-vocs"})]})]})}function m(n={}){let{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},50065:function(n,e,t){t.d(e,{Z:function(){return s},a:function(){return i}});var a=t(67294);let r={},o=a.createContext(r);function i(n){let e=a.useContext(o);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);