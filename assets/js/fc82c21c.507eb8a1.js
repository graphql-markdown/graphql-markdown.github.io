"use strict";(self.webpackChunk_graphql_markdown_website=self.webpackChunk_graphql_markdown_website||[]).push([["7694"],{2107:function(e,n,t){t.r(n),t.d(n,{default:()=>m,frontMatter:()=>s,metadata:()=>a,assets:()=>l,toc:()=>d,contentTitle:()=>i});var a=JSON.parse('{"id":"advanced/integration-with-frameworks","title":"Integration with Frameworks","description":"This guide provides examples for integrating GraphQL-Markdown with popular documentation frameworks.","source":"@site/docs/advanced/integration-with-frameworks.md","sourceDirName":"advanced","slug":"/advanced/integration-with-frameworks","permalink":"/docs/advanced/integration-with-frameworks","draft":false,"unlisted":false,"editUrl":"https://github.com/graphql-markdown/graphql-markdown/tree/main/docs/advanced/integration-with-frameworks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Homepage","permalink":"/docs/advanced/homepage"},"next":{"title":"Schema loading","permalink":"/docs/advanced/schema-loading"}}'),r=t("85893"),o=t("50065");let s={},i="Integration with Frameworks",l={},d=[{value:"General Integration Approach",id:"general-integration-approach",level:2},{value:"Basic Integration Example",id:"basic-integration-example",level:3},{value:"Framework-Specific Integration",id:"framework-specific-integration",level:2},{value:"Docusaurus",id:"docusaurus",level:3},{value:"Astro Starlight",id:"astro-starlight",level:3},{value:"Next.js with Fumadocs",id:"nextjs-with-fumadocs",level:3},{value:"VuePress",id:"vuepress",level:3},{value:"Gatsby",id:"gatsby",level:3}];function c(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"integration-with-frameworks",children:"Integration with Frameworks"})}),"\n",(0,r.jsx)(n.p,{children:"This guide provides examples for integrating GraphQL-Markdown with popular documentation frameworks."}),"\n",(0,r.jsx)(n.h2,{id:"general-integration-approach",children:"General Integration Approach"}),"\n",(0,r.jsx)(n.p,{children:"Most documentation frameworks allow you to generate documentation during the build process. You can integrate GraphQL-Markdown by creating a script that runs before your documentation build."}),"\n",(0,r.jsx)(n.h3,{id:"basic-integration-example",children:"Basic Integration Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { runGraphQLMarkdown } from '@graphql-markdown/cli';\n\nconst config = {\n  schema: './schema.graphql',\n  rootPath: './docs',\n};\n\nawait runGraphQLMarkdown(config);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"framework-specific-integration",children:"Framework-Specific Integration"}),"\n",(0,r.jsx)(n.h3,{id:"docusaurus",children:"Docusaurus"}),"\n",(0,r.jsx)(n.p,{children:"The official Docusaurus integration is available as a dedicated package:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const path = require('node:path');\n\nmodule.exports = {\n  // ... other docusaurus config\n  plugins: [\n    [\n      '@graphql-markdown/docusaurus',\n      {\n        schema: path.join(__dirname, 'schema.graphql'),\n        rootPath: path.join(__dirname, 'docs'),\n        baseURL: 'api',\n      },\n    ],\n  ],\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For more details, check the ",(0,r.jsx)(n.a,{href:"https://github.com/graphql-markdown/graphql-markdown/tree/main/packages/docusaurus",children:"@graphql-markdown/docusaurus"})," package."]}),"\n",(0,r.jsx)(n.h3,{id:"astro-starlight",children:"Astro Starlight"}),"\n",(0,r.jsx)(n.p,{children:"For Astro Starlight integration, implement a custom MDX parser:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// src/modules/astro-mdx.cjs\nconst parser = {\n  generateIndexMetafile: async (dirPath, category, options) => {\n    // Generate index file for a directory\n  },\n  formatMDXAdmonition: ({ text, title, type, icon }, meta) => {\n    return `::: ${type}${title ? ` ${title}` : ''}\\n${text}\\n:::`;\n  },\n  formatMDXBadge: ({ text, classname }) => {\n    return `<Badge variant=\"${classname}\">${text}</Badge>`;\n  },\n  mdxDeclaration: 'import { Badge } from \\'@astrojs/starlight/components\\';'\n};\n\nmodule.exports = parser;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["See complete implementation: ",(0,r.jsx)(n.a,{href:"https://github.com/graphql-markdown/demo-astro-starlight",children:"demo-astro-starlight"})]}),"\n",(0,r.jsx)(n.h3,{id:"nextjs-with-fumadocs",children:"Next.js with Fumadocs"}),"\n",(0,r.jsx)(n.p,{children:"For Next.js using Fumadocs, implement a custom MDX parser:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// lib/fumadocs-mdx.cjs\nconst parser = {\n  generateIndexMetafile: async (dirPath, category, options) => {\n    // Generate index file for a directory\n  },\n  formatMDXAdmonition: ({ text, title, type }, meta) => {\n    return `<Callout type=\"${type}\">${title ? `**${title}**: ` : ''}${text}</Callout>`;\n  },\n  formatMDXBadge: ({ text, classname }) => {\n    return `<Badge variant=\"${classname}\">${text}</Badge>`;\n  },\n  formatMDXDetails: ({ dataOpen, dataClose }) => {\n    return `<Collapsible summary=\"${dataOpen}\">\\n\\n${dataClose}\\n\\n</Collapsible>`;\n  },\n  mdxDeclaration: `import { Callout } from '@fumadocs/core';\nimport { Badge, Collapsible } from '@/components';`\n};\n\nmodule.exports = parser;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Full implementation: ",(0,r.jsx)(n.a,{href:"https://github.com/graphql-markdown/demo-nextjs-fumadocs/blob/main/lib/fumadoc-mdx.cjs",children:"fumadocs-mdx.cjs"})]}),"\n",(0,r.jsx)(n.h3,{id:"vuepress",children:"VuePress"}),"\n",(0,r.jsx)(n.p,{children:"For VuePress integration, implement a custom MDX parser:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// src/vuepress-mdx.cjs\nconst parser = {\n  formatMDXAdmonition: ({ text, title, type }, meta) => {\n    return `::: ${type}${title ? ` ${title}` : ''}\\n${text}\\n:::`;\n  },\n  formatMDXBadge: ({ text, classname }) => {\n    return `<Badge type=\"${classname}\" text=\"${text}\" />`;\n  },\n  mdxDeclaration: `import { Badge } from '@vuepress/theme-default/lib/client/components'`\n};\n\nmodule.exports = parser;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"gatsby",children:"Gatsby"}),"\n",(0,r.jsx)(n.p,{children:"For Gatsby integration, implement a custom MDX parser:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// src/gatsby-mdx.cjs\nconst parser = {\n  formatMDXAdmonition: ({ text, title, type }, meta) => {\n    return `<Alert variant=\"${type}\">${title ? `**${title}**: ` : ''}${text}</Alert>`;\n  },\n  formatMDXBadge: ({ text, classname }) => {\n    return `<Badge variant=\"${classname}\">${text}</Badge>`;\n  },\n  mdxDeclaration: `import { Alert, Badge } from '@chakra-ui/react';`\n};\n\nmodule.exports = parser;\n"})})]})}function m(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return i},a:function(){return s}});var a=t(67294);let r={},o=a.createContext(r);function s(e){let n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);