"use strict";(self.webpackChunk_graphql_markdown_website=self.webpackChunk_graphql_markdown_website||[]).push([[6085],{4137:(e,t,a)=>{a.d(t,{Zo:()=>o,kt:()=>u});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var d=r.createContext({}),m=function(e){var t=r.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},o=function(e){var t=m(e.components);return r.createElement(d.Provider,{value:t},e.children)},s="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,d=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),s=m(a),c=n,u=s["".concat(d,".").concat(c)]||s[c]||k[c]||l;return a?r.createElement(u,p(p({ref:t},o),{},{components:a})):r.createElement(u,p({ref:t},o))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,p=new Array(l);p[0]=c;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[s]="string"==typeof e?e:n,p[1]=i;for(var m=2;m<l;m++)p[m]=a[m];return r.createElement.apply(null,p)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},1097:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>s,frontMatter:()=>l,metadata:()=>i,toc:()=>m});var r=a(7462),n=(a(7294),a(4137));const l={title:"introspection",pagination_prev:null,pagination_next:null,toc_max_heading_level:2},p=void 0,i={unversionedId:"graphql/introspection",id:"graphql/introspection",title:"introspection",description:"Library for introspecting a GraphQL schema.",source:"@site/api/graphql/introspection.md",sourceDirName:"graphql",slug:"/graphql/introspection",permalink:"/api/graphql/introspection",draft:!1,tags:[],version:"current",frontMatter:{title:"introspection",pagination_prev:null,pagination_next:null,toc_max_heading_level:2},sidebar:"defaultSidebar"},d={},m=[{value:"__getFields",id:"__getfields",level:2},{value:"Type parameters",id:"type-parameters",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Source",id:"source",level:3},{value:"getDirective",id:"getdirective",level:2},{value:"Parameters",id:"parameters-1",level:3},{value:"Returns",id:"returns-1",level:3},{value:"Source",id:"source-1",level:3},{value:"getFields",id:"getfields",level:2},{value:"Parameters",id:"parameters-2",level:3},{value:"Returns",id:"returns-2",level:3},{value:"Source",id:"source-2",level:3},{value:"getOperation",id:"getoperation",level:2},{value:"Parameters",id:"parameters-3",level:3},{value:"Returns",id:"returns-3",level:3},{value:"Source",id:"source-3",level:3},{value:"getSchemaMap",id:"getschemamap",level:2},{value:"Parameters",id:"parameters-4",level:3},{value:"Returns",id:"returns-4",level:3},{value:"Source",id:"source-4",level:3},{value:"Example",id:"example",level:3},{value:"getTypeDirectiveArgValue",id:"gettypedirectiveargvalue",level:2},{value:"Parameters",id:"parameters-5",level:3},{value:"Returns",id:"returns-5",level:3},{value:"Source",id:"source-5",level:3},{value:"getTypeDirectiveValues",id:"gettypedirectivevalues",level:2},{value:"Parameters",id:"parameters-6",level:3},{value:"Returns",id:"returns-6",level:3},{value:"Source",id:"source-6",level:3},{value:"getTypeFromSchema",id:"gettypefromschema",level:2},{value:"Type parameters",id:"type-parameters-1",level:3},{value:"Parameters",id:"parameters-7",level:3},{value:"Returns",id:"returns-7",level:3},{value:"Source",id:"source-7",level:3},{value:"See",id:"see",level:3},{value:"getTypeName",id:"gettypename",level:2},{value:"Parameters",id:"parameters-8",level:3},{value:"Returns",id:"returns-8",level:3},{value:"Source",id:"source-8",level:3},{value:"hasAstNode",id:"hasastnode",level:2},{value:"Type parameters",id:"type-parameters-2",level:3},{value:"Parameters",id:"parameters-9",level:3},{value:"Returns",id:"returns-9",level:3},{value:"Source",id:"source-9",level:3},{value:"hasDirective",id:"hasdirective",level:2},{value:"Parameters",id:"parameters-10",level:3},{value:"Returns",id:"returns-10",level:3},{value:"Source",id:"source-10",level:3}],o={toc:m};function s(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Library for introspecting a GraphQL schema.\nThe entry point method is ",(0,n.kt)("a",{parentName:"p",href:"/api/graphql/introspection#getschemamap"},"getSchemaMap"),"."),(0,n.kt)("h2",{id:"__getfields"},"_","_","getFields"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"__getFields<T, V>(\n  type,\n  processor?,\n  fallback?): GraphQLFieldMap< unknown, unknown > | GraphQLInputFieldMap | V\n")),(0,n.kt)("p",null,"Returns the fields from a GraphQL schema type."),(0,n.kt)("p",null,"see ",(0,n.kt)("a",{parentName:"p",href:"/api/graphql/introspection#getoperation"},"getOperation"),", ",(0,n.kt)("a",{parentName:"p",href:"/api/graphql/introspection#getfields"},"getFields")),(0,n.kt)("h3",{id:"type-parameters"},"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Parameter"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"T"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"V"))))),(0,n.kt)("h3",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"type")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"T")),(0,n.kt)("td",{parentName:"tr",align:"left"},"the GraphQL schema type to parse.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"processor"),"?"),(0,n.kt)("td",{parentName:"tr",align:"left"},"(",(0,n.kt)("inlineCode",{parentName:"td"},"fieldMap"),") => ",(0,n.kt)("inlineCode",{parentName:"td"},"V")),(0,n.kt)("td",{parentName:"tr",align:"left"},"optional callback function to parse the fields map.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"fallback"),"?"),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"V")),(0,n.kt)("td",{parentName:"tr",align:"left"},"optional fallback value, ",(0,n.kt)("inlineCode",{parentName:"td"},"undefined")," if not set.")))),(0,n.kt)("h3",{id:"returns"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLFieldMap"),"\\< ",(0,n.kt)("inlineCode",{parentName:"p"},"unknown"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"unknown")," ",">"," ","|"," ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLInputFieldMap")," ","|"," ",(0,n.kt)("inlineCode",{parentName:"p"},"V")),(0,n.kt)("p",null,"a map of fields as k/v records, or ",(0,n.kt)("inlineCode",{parentName:"p"},"fallback")," value if no fields available."),(0,n.kt)("h3",{id:"source"},"Source"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/graphql-markdown/graphql-markdown/blob/61a214b/packages/graphql/src/introspection.ts#L241"},"packages/graphql/src/introspection.ts:241")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"getdirective"},"getDirective"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"getDirective(entity, directives): GraphQLDirective[]\n")),(0,n.kt)("p",null,"Returns a schema entity's list of directives matching a defined set."),(0,n.kt)("h3",{id:"parameters-1"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"entity")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"unknown")),(0,n.kt)("td",{parentName:"tr",align:"left"},"a GraphQL schema entity.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"directives")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"Maybe"),"\\< ",(0,n.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,n.kt)("inlineCode",{parentName:"td"},"string"),"[] ",">"),(0,n.kt)("td",{parentName:"tr",align:"left"},"a directive name or a list of directive names.")))),(0,n.kt)("h3",{id:"returns-1"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLDirective"),"[]"),(0,n.kt)("p",null,"a list of GraphQL directives matching the set, else ",(0,n.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,n.kt)("h3",{id:"source-1"},"Source"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/graphql-markdown/graphql-markdown/blob/61a214b/packages/graphql/src/introspection.ts#L143"},"packages/graphql/src/introspection.ts:143")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"getfields"},"getFields"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"getFields(type): unknown[]\n")),(0,n.kt)("p",null,"Returns fields map for a GraphQL schema type."),(0,n.kt)("p",null,"see ",(0,n.kt)("a",{parentName:"p",href:"/api/graphql/introspection#getschemamap"},"getSchemaMap")),(0,n.kt)("h3",{id:"parameters-2"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"type")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"unknown")),(0,n.kt)("td",{parentName:"tr",align:"left"},"the GraphQL schema type to parse.")))),(0,n.kt)("h3",{id:"returns-2"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"unknown"),"[]"),(0,n.kt)("p",null,"a list of fields of type object."),(0,n.kt)("h3",{id:"source-2"},"Source"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/graphql-markdown/graphql-markdown/blob/61a214b/packages/graphql/src/introspection.ts#L306"},"packages/graphql/src/introspection.ts:306")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"getoperation"},"getOperation"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"getOperation(operationType?): Record< string, GraphQLOperationType >\n")),(0,n.kt)("p",null,"Returns fields map for a GraphQL operation type (query, mutation, subscription...)."),(0,n.kt)("p",null,"see ",(0,n.kt)("a",{parentName:"p",href:"/api/graphql/introspection#getschemamap"},"getSchemaMap")),(0,n.kt)("h3",{id:"parameters-3"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"operationType"),"?"),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"unknown")),(0,n.kt)("td",{parentName:"tr",align:"left"},"the operation type to parse.")))),(0,n.kt)("h3",{id:"returns-3"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"Record"),"\\< ",(0,n.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLOperationType")," ",">"),(0,n.kt)("p",null,"a map of fields as k/v records."),(0,n.kt)("h3",{id:"source-3"},"Source"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/graphql-markdown/graphql-markdown/blob/61a214b/packages/graphql/src/introspection.ts#L282"},"packages/graphql/src/introspection.ts:282")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"getschemamap"},"getSchemaMap"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"getSchemaMap(schema): SchemaMap\n")),(0,n.kt)("p",null,"Returns an introspection map of the GraphQL schema.\nThis is the entry point for GraphQL-Markdown schema parsing features."),(0,n.kt)("h3",{id:"parameters-4"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"schema")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"Maybe"),"\\< ",(0,n.kt)("inlineCode",{parentName:"td"},"GraphQLSchema")," ",">"),(0,n.kt)("td",{parentName:"tr",align:"left"},"a GraphQL schema.")))),(0,n.kt)("h3",{id:"returns-4"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"SchemaMap")),(0,n.kt)("p",null,"a schema map by GraphQL entities (see SchemaEntity)."),(0,n.kt)("h3",{id:"source-4"},"Source"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/graphql-markdown/graphql-markdown/blob/61a214b/packages/graphql/src/introspection.ts#L411"},"packages/graphql/src/introspection.ts:411")),(0,n.kt)("h3",{id:"example"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},'import { buildSchema } from "graphql";\nimport { getSchemaMap } from "@graphql-markdown/utils/graphql";\n\nconst schema = buildSchema(`\n  interface Record {\n    id: String!\n  }\n  type StudyItem implements Record {\n    id: String!\n    subject: String!\n    duration: Int!\n  }\n  type Query {\n    getStudyItems(subject: String): [StudyItem!]\n    getStudyItem(id: String!): StudyItem\n  }\n  type Mutation {\n    addStudyItem(subject: String!, duration: Int!): StudyItem\n  }\n  type Subscription {\n    listStudyItems: [StudyItem!]\n  }\n`);\n\nconst schemaTypeMap = getSchemaMap(schema);\n\n// expected result: {\n//   queries: {\n//     getStudyItems: GraphQLField,\n//     getStudyItem: GraphQLField,\n//   },\n//   mutations: {\n//     addStudyItem: GraphQLField,\n//   },\n//   subscriptions: {\n//     listStudyItems: GraphQLField,\n//   }\n//   directives: {\n//     include: GraphQLDirective,\n//     skip: GraphQLDirective,\n//     deprecated: GraphQLDirective,\n//     specifiedBy: GraphQLDirective,\n//   objects: {\n//     StudyItem: GraphQLObjectType,\n//   unions: {},\n//   interfaces: {\n//     Record: GraphQLInterfaceType,\n//   enums: {},\n//   inputs: {},\n//   scalars: {\n//     String: GraphQLScalarType,\n//     Int: GraphQLScalarType,\n//     Boolean: GraphQLScalarType,\n//   }\n// }\n')),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"gettypedirectiveargvalue"},"getTypeDirectiveArgValue"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"getTypeDirectiveArgValue(\n  directive,\n  node,\n  argName): Maybe< Record< string, unknown > >\n")),(0,n.kt)("p",null,"Returns one directive's argument's value linked to a GraphQL schema type.\nIt calls ",(0,n.kt)("a",{parentName:"p",href:"/api/graphql/introspection#gettypedirectivevalues"},"getTypeDirectiveValues")," and returns a matching record."),(0,n.kt)("h3",{id:"parameters-5"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"directive")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"GraphQLDirective")),(0,n.kt)("td",{parentName:"tr",align:"left"},"a GraphQL directive defined in the schema.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"node")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"unknown")),(0,n.kt)("td",{parentName:"tr",align:"left"},"-")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"argName")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:"left"},"the name of the GraphQL directive argument to fetch the value from.")))),(0,n.kt)("h3",{id:"returns-5"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"Maybe"),"\\< ",(0,n.kt)("inlineCode",{parentName:"p"},"Record"),"\\< ",(0,n.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"unknown")," ",">"," ",">"),(0,n.kt)("p",null,"a record k/v with ",(0,n.kt)("inlineCode",{parentName:"p"},"argName")," as key and the argument's value."),(0,n.kt)("h3",{id:"source-5"},"Source"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/graphql-markdown/graphql-markdown/blob/61a214b/packages/graphql/src/introspection.ts#L184"},"packages/graphql/src/introspection.ts:184")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"gettypedirectivevalues"},"getTypeDirectiveValues"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"getTypeDirectiveValues(directive, type): Maybe< Record< string, unknown > >\n")),(0,n.kt)("p",null,"Returns all directive's arguments' values linked to a GraphQL schema type."),(0,n.kt)("h3",{id:"parameters-6"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"directive")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"GraphQLDirective")),(0,n.kt)("td",{parentName:"tr",align:"left"},"a GraphQL directive defined in the schema.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"type")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"unknown")),(0,n.kt)("td",{parentName:"tr",align:"left"},"the GraphQL schema type to parse.")))),(0,n.kt)("h3",{id:"returns-6"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"Maybe"),"\\< ",(0,n.kt)("inlineCode",{parentName:"p"},"Record"),"\\< ",(0,n.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"unknown")," ",">"," ",">"),(0,n.kt)("p",null,"a record k/v with arguments' name as keys and arguments' value."),(0,n.kt)("h3",{id:"source-6"},"Source"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/graphql-markdown/graphql-markdown/blob/61a214b/packages/graphql/src/introspection.ts#L207"},"packages/graphql/src/introspection.ts:207")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"gettypefromschema"},"getTypeFromSchema"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"getTypeFromSchema<T>(schema, type): Maybe< Record< string, T > >\n")),(0,n.kt)("p",null,"Returns a map of GraphQL named types from a schema for a defined GraphQL type.\nWhen parsing the entities, internal GraphQL entities (starting with ",(0,n.kt)("inlineCode",{parentName:"p"},"__"),") are excluded."),(0,n.kt)("h3",{id:"type-parameters-1"},"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Parameter"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"T"))))),(0,n.kt)("h3",{id:"parameters-7"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"schema")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"Maybe"),"\\< ",(0,n.kt)("inlineCode",{parentName:"td"},"GraphQLSchema")," ",">"),(0,n.kt)("td",{parentName:"tr",align:"left"},"a GraphQL schema.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"type")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"unknown")),(0,n.kt)("td",{parentName:"tr",align:"left"},"a GraphQL type, eg ",(0,n.kt)("inlineCode",{parentName:"td"},"GraphQLObjectType"),".")))),(0,n.kt)("h3",{id:"returns-7"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"Maybe"),"\\< ",(0,n.kt)("inlineCode",{parentName:"p"},"Record"),"\\< ",(0,n.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"T")," ",">"," ",">"),(0,n.kt)("p",null,"a map of GraphQL named types for the matching GraphQL type, or undefined if no match."),(0,n.kt)("h3",{id:"source-7"},"Source"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/graphql-markdown/graphql-markdown/blob/61a214b/packages/graphql/src/introspection.ts#L58"},"packages/graphql/src/introspection.ts:58")),(0,n.kt)("h3",{id:"see"},"See"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/api/graphql/introspection#getschemamap"},"getSchemaMap")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"gettypename"},"getTypeName"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'getTypeName(type, defaultName = ""): string\n')),(0,n.kt)("p",null,"Resolves the name of a GraphQL schema type."),(0,n.kt)("h3",{id:"parameters-8"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"type")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"unknown")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"undefined")),(0,n.kt)("td",{parentName:"tr",align:"left"},"-")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"defaultName")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},'""')),(0,n.kt)("td",{parentName:"tr",align:"left"},"optional fallback value if the name resolution fails.")))),(0,n.kt)("h3",{id:"returns-8"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"string")),(0,n.kt)("p",null,"the type's name, or ",(0,n.kt)("inlineCode",{parentName:"p"},"defaultName"),"."),(0,n.kt)("h3",{id:"source-8"},"Source"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/graphql-markdown/graphql-markdown/blob/61a214b/packages/graphql/src/introspection.ts#L327"},"packages/graphql/src/introspection.ts:327")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"hasastnode"},"hasAstNode"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"hasAstNode<T>(node): node is AstNodeType<T>\n")),(0,n.kt)("p",null,"Type guard for type with an AST node property."),(0,n.kt)("h3",{id:"type-parameters-2"},"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Parameter"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"T"))))),(0,n.kt)("h3",{id:"parameters-9"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"node")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"T")),(0,n.kt)("td",{parentName:"tr",align:"left"},"a GraphQL schema named type.")))),(0,n.kt)("h3",{id:"returns-9"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"node is AstNodeType<T>")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"true")," if the entity has an AST node property, else ",(0,n.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,n.kt)("h3",{id:"source-9"},"Source"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/graphql-markdown/graphql-markdown/blob/61a214b/packages/graphql/src/introspection.ts#L100"},"packages/graphql/src/introspection.ts:100")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"hasdirective"},"hasDirective"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"hasDirective(entity, directives): boolean\n")),(0,n.kt)("p",null,"Checks if a schema entity as a directive belonging to a defined set."),(0,n.kt)("h3",{id:"parameters-10"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"entity")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"unknown")),(0,n.kt)("td",{parentName:"tr",align:"left"},"a GraphQL schema entity.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"directives")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"Maybe"),"\\< ",(0,n.kt)("inlineCode",{parentName:"td"},"string")," ","|"," ",(0,n.kt)("inlineCode",{parentName:"td"},"string"),"[] ",">"),(0,n.kt)("td",{parentName:"tr",align:"left"},"a directive name or a list of directive names.")))),(0,n.kt)("h3",{id:"returns-10"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"boolean")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"true")," if the entity has at least one directive matching, else ",(0,n.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,n.kt)("h3",{id:"source-10"},"Source"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/graphql-markdown/graphql-markdown/blob/61a214b/packages/graphql/src/introspection.ts#L113"},"packages/graphql/src/introspection.ts:113")))}s.isMDXComponent=!0}}]);