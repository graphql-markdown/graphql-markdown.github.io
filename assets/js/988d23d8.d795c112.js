"use strict";(self.webpackChunk_graphql_markdown_website=self.webpackChunk_graphql_markdown_website||[]).push([[5023],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},p=Object.keys(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,p=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),s=c(n),g=a,d=s["".concat(l,".").concat(g)]||s[g]||m[g]||p;return n?r.createElement(d,o(o({ref:t},u),{},{components:n})):r.createElement(d,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var p=n.length,o=new Array(p);o[0]=g;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[s]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<p;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},7568:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>s,frontMatter:()=>p,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(4137));const p={title:"group",pagination_prev:null,pagination_next:null,toc_max_heading_level:2},o=void 0,i={unversionedId:"graphql/group",id:"graphql/group",title:"group",description:"Library supporting groupByDirective for grouping GraphQL schema entities.",source:"@site/api/graphql/group.md",sourceDirName:"graphql",slug:"/graphql/group",permalink:"/api/graphql/group",draft:!1,tags:[],version:"current",frontMatter:{title:"group",pagination_prev:null,pagination_next:null,toc_max_heading_level:2},sidebar:"defaultSidebar"},l={},c=[{value:"See",id:"see",level:2},{value:"getGroupName()",id:"getgroupname",level:2},{value:"Type parameters",id:"type-parameters",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:3},{value:"Source",id:"source",level:3},{value:"getGroups()",id:"getgroups",level:2},{value:"Parameters",id:"parameters-1",level:3},{value:"Returns",id:"returns-1",level:3},{value:"Example",id:"example-1",level:3},{value:"Source",id:"source-1",level:3}],u={toc:c};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Library supporting ",(0,a.kt)("inlineCode",{parentName:"p"},"groupByDirective")," for grouping GraphQL schema entities."),(0,a.kt)("h2",{id:"see"},"See"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://graphql-markdown.github.io/docs/advanced/group-by-directive"},"Option ",(0,a.kt)("inlineCode",{parentName:"a"},"groupByDirective"))),(0,a.kt)("h2",{id:"getgroupname"},"getGroupName()"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"getGroupName<T>(type, groupByDirective): Maybe<string>\n")),(0,a.kt)("p",null,"Gets the group name for a schema type based on the directive information."),(0,a.kt)("h3",{id:"type-parameters"},"Type parameters"),(0,a.kt)("p",null,"\u25aa ",(0,a.kt)("strong",{parentName:"p"},"T")),(0,a.kt)("h3",{id:"parameters"},"Parameters"),(0,a.kt)("p",null,"\u25aa ",(0,a.kt)("strong",{parentName:"p"},"type"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"T")),(0,a.kt)("p",null,"a GraphQL schema named type"),(0,a.kt)("p",null,"\u25aa ",(0,a.kt)("strong",{parentName:"p"},"groupByDirective"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"Maybe"),"\\<",(0,a.kt)("inlineCode",{parentName:"p"},"GroupByDirectiveOptions"),">"),(0,a.kt)("p",null,"the ",(0,a.kt)("inlineCode",{parentName:"p"},"groupByDirective")," option."),(0,a.kt)("h3",{id:"returns"},"Returns"),(0,a.kt)("p",null,"the group name matching the type, or ",(0,a.kt)("inlineCode",{parentName:"p"},"groupByDirective.fallback")," if no match found."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { buildSchema } from "graphql";\nimport { getGroupName } from "@graphql-markdown/utils/groups";\n\nconst schema = buildSchema(`\n  directive @doc(\n    category: String\n  ) on OBJECT | INPUT_OBJECT | UNION | ENUM | INTERFACE | FIELD_DEFINITION | ARGUMENT_DEFINITION\n  type Unicorn {\n    name: String!\n  }\n  type Bird @doc(category: "animal") {\n    name: String!\n  }\n  type Fish {\n    name: String!\n  }\n  type Elf @doc(category: "fantasy") {\n    name: String!\n  }\n  type Query {\n    Fish: [Fish!]! @doc(category: "animal")\n  }\n`);\n\nconst groupOptions = {\n  fallback: "common",\n  directive: "doc",\n  field: "category",\n}\n\ngetGroupName(schema.getType("Bird"), groupOptions); // Expected result: "animal"\n\ngetGroupName(schema.getType("Unicorn"), groupOptions); // Expected result: "common"\n\n')),(0,a.kt)("h3",{id:"source"},"Source"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/graphql-markdown/graphql-markdown/blob/fdeba50/packages/graphql/src/group.ts#L72"},"packages/graphql/src/group.ts:72")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"getgroups"},"getGroups()"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"getGroups(schemaMap, groupByDirective): Maybe<Partial<Record<SchemaEntity, Record<string, Maybe<string>>>>>\n")),(0,a.kt)("p",null,"Parses a GraphQL schema to build a map of entities with matching ",(0,a.kt)("inlineCode",{parentName:"p"},"groupByDirective")," option."),(0,a.kt)("h3",{id:"parameters-1"},"Parameters"),(0,a.kt)("p",null,"\u25aa ",(0,a.kt)("strong",{parentName:"p"},"schemaMap"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"SchemaMap")),(0,a.kt)("p",null,"the GraphQL schema map returned by ",(0,a.kt)("a",{parentName:"p",href:"/api/graphql/introspection#getschemamap"},"introspection!getSchemaMap")),(0,a.kt)("p",null,"\u25aa ",(0,a.kt)("strong",{parentName:"p"},"groupByDirective"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"Maybe"),"\\<",(0,a.kt)("inlineCode",{parentName:"p"},"GroupByDirectiveOptions"),">"),(0,a.kt)("p",null,"the ",(0,a.kt)("inlineCode",{parentName:"p"},"groupByDirective")," option."),(0,a.kt)("h3",{id:"returns-1"},"Returns"),(0,a.kt)("p",null,"a map of entities with matching group name."),(0,a.kt)("h3",{id:"example-1"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { buildSchema } from "graphql";\nimport { getGroups } from "@graphql-markdown/utils/groups";\n\nconst schema = buildSchema(`\n  directive @doc(\n    category: String\n  ) on OBJECT | INPUT_OBJECT | UNION | ENUM | INTERFACE | FIELD_DEFINITION | ARGUMENT_DEFINITION\n  type Unicorn {\n    name: String!\n  }\n  type Bird @doc(category: "animal") {\n    name: String!\n  }\n  type Fish {\n    name: String!\n  }\n  type Elf @doc(category: "fantasy") {\n    name: String!\n  }\n  type Query {\n    Fish: [Fish!]! @doc(category: "animal")\n  }\n`);\n\nconst schemaMap = {\n  objects: schema.getTypeMap(),\n  queries: schema.getQueryType()?.getFields(),\n};\n\nconst groupOptions = {\n  fallback: "common",\n  directive: "doc",\n  field: "category",\n}\n\nconst groupsMap = getGroups(schemaMap, groupOptions);\n\n// Expected result: {\n//   "objects": {\n//     "Bird": "animal",\n//     "Boolean": "common",\n//     "Elf": "fantasy",\n//     "Fish": "common",\n//     "Query": "common",\n//     "String": "common",\n//     "Unicorn": "common",\n//   },\n//   "queries": {\n//     "Fish": "animal",\n//   },\n// }\n')),(0,a.kt)("h3",{id:"source-1"},"Source"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/graphql-markdown/graphql-markdown/blob/fdeba50/packages/graphql/src/group.ts#L173"},"packages/graphql/src/group.ts:173")))}s.isMDXComponent=!0}}]);