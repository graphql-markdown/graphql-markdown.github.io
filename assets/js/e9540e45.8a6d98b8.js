"use strict";(self.webpackChunk_graphql_markdown_website=self.webpackChunk_graphql_markdown_website||[]).push([["9358"],{5213:function(e,a,n){n.r(a),n.d(a,{default:()=>o,frontMatter:()=>l,metadata:()=>r,assets:()=>p,toc:()=>h,contentTitle:()=>s});var r=JSON.parse('{"id":"graphql/relation","title":"relation","description":"Library supporting relatedTypeSection for displaying relations between GraphQL schema entities.","source":"@site/api/graphql/relation.md","sourceDirName":"graphql","slug":"/graphql/relation","permalink":"/api/graphql/relation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"relation","pagination_prev":null,"pagination_next":null,"toc_max_heading_level":2},"sidebar":"defaultSidebar"}'),t=n("85893"),i=n("50065");let l={title:"relation",pagination_prev:null,pagination_next:null,toc_max_heading_level:2},s=void 0,p={},h=[{value:"See",id:"see",level:2},{value:"getRelationOfField",id:"getrelationoffield",level:2},{value:"See",id:"see-1",level:3},{value:"Type Param",id:"type-param",level:3},{value:"Type Param",id:"type-param-1",level:3},{value:"Param",id:"param",level:3},{value:"Param",id:"param-1",level:3},{value:"Returns",id:"returns",level:3},{value:"getRelationOfImplementation",id:"getrelationofimplementation",level:2},{value:"See",id:"see-2",level:3},{value:"Type Param",id:"type-param-2",level:3},{value:"Type Param",id:"type-param-3",level:3},{value:"Param",id:"param-2",level:3},{value:"Param",id:"param-3",level:3},{value:"Returns",id:"returns-1",level:3},{value:"getRelationOfInterface",id:"getrelationofinterface",level:2},{value:"See",id:"see-3",level:3},{value:"Type Param",id:"type-param-4",level:3},{value:"Type Param",id:"type-param-5",level:3},{value:"Param",id:"param-4",level:3},{value:"Param",id:"param-5",level:3},{value:"Returns",id:"returns-2",level:3},{value:"getRelationOfReturn",id:"getrelationofreturn",level:2},{value:"See",id:"see-4",level:3},{value:"Type Param",id:"type-param-6",level:3},{value:"Type Param",id:"type-param-7",level:3},{value:"Param",id:"param-6",level:3},{value:"Param",id:"param-7",level:3},{value:"Returns",id:"returns-3",level:3},{value:"getRelationOfUnion",id:"getrelationofunion",level:2},{value:"See",id:"see-5",level:3},{value:"Type Param",id:"type-param-8",level:3},{value:"Type Param",id:"type-param-9",level:3},{value:"Param",id:"param-8",level:3},{value:"Param",id:"param-9",level:3},{value:"Returns",id:"returns-4",level:3}];function d(e){let a={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(a.p,{children:["Library supporting ",(0,t.jsx)(a.code,{children:"relatedTypeSection"})," for displaying relations between GraphQL schema entities."]}),"\n",(0,t.jsx)(a.h2,{id:"see",children:"See"}),"\n",(0,t.jsx)(a.p,{children:(0,t.jsxs)(a.a,{href:"https://graphql-markdown.dev/docs/settings#printtypeoptions",children:["Option ",(0,t.jsx)(a.code,{children:"relatedTypeSection"})]})}),"\n",(0,t.jsx)(a.h2,{id:"getrelationoffield",children:"getRelationOfField"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-ts",children:"const getRelationOfField: IGetRelation<RelationOfField>;\n"})}),"\n",(0,t.jsx)(a.p,{children:"Defined in: packages/graphql/src/relation.ts:167"}),"\n",(0,t.jsx)(a.p,{children:"Returns a map of fields and arguments where the GraphQL schema type matches the type."}),"\n",(0,t.jsx)(a.h3,{id:"see-1",children:"See"}),"\n",(0,t.jsx)(a.p,{children:"mapRelationOf"}),"\n",(0,t.jsx)(a.h3,{id:"type-param",children:"Type Param"}),"\n",(0,t.jsx)(a.p,{children:"the type of the GraphQL schema type."}),"\n",(0,t.jsx)(a.h3,{id:"type-param-1",children:"Type Param"}),"\n",(0,t.jsx)(a.p,{children:"the return type of map of relations (see IGetRelation)."}),"\n",(0,t.jsx)(a.h3,{id:"param",children:"Param"}),"\n",(0,t.jsx)(a.p,{children:"the GraphQL schema type being processed."}),"\n",(0,t.jsx)(a.h3,{id:"param-1",children:"Param"}),"\n",(0,t.jsxs)(a.p,{children:["a GraphQL schema map (see ",(0,t.jsx)(a.a,{href:"/api/graphql/introspection#getschemamap",children:"introspection!getSchemaMap"}),")."]}),"\n",(0,t.jsx)(a.h3,{id:"returns",children:"Returns"}),"\n",(0,t.jsx)(a.p,{children:"a record map of fields and arguments relations."}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"getrelationofimplementation",children:"getRelationOfImplementation"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-ts",children:"const getRelationOfImplementation: IGetRelation<RelationOfImplementation>;\n"})}),"\n",(0,t.jsx)(a.p,{children:"Defined in: packages/graphql/src/relation.ts:353"}),"\n",(0,t.jsx)(a.p,{children:"Returns a map of types (unions or interfaces) where the GraphQL schema type is implemented."}),"\n",(0,t.jsx)(a.h3,{id:"see-2",children:"See"}),"\n",(0,t.jsx)(a.p,{children:"mapRelationOf"}),"\n",(0,t.jsx)(a.h3,{id:"type-param-2",children:"Type Param"}),"\n",(0,t.jsx)(a.p,{children:"the type of the GraphQL schema type."}),"\n",(0,t.jsx)(a.h3,{id:"type-param-3",children:"Type Param"}),"\n",(0,t.jsx)(a.p,{children:"the return type of map of relations (see IGetRelation)."}),"\n",(0,t.jsx)(a.h3,{id:"param-2",children:"Param"}),"\n",(0,t.jsx)(a.p,{children:"the GraphQL schema type being processed."}),"\n",(0,t.jsx)(a.h3,{id:"param-3",children:"Param"}),"\n",(0,t.jsxs)(a.p,{children:["a GraphQL schema map (see ",(0,t.jsx)(a.a,{href:"/api/graphql/introspection#getschemamap",children:"introspection!getSchemaMap"}),")."]}),"\n",(0,t.jsx)(a.h3,{id:"returns-1",children:"Returns"}),"\n",(0,t.jsx)(a.p,{children:"a record map of unions or interfaces relations."}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"getrelationofinterface",children:"getRelationOfInterface"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-ts",children:"const getRelationOfInterface: IGetRelation<RelationOfInterface>;\n"})}),"\n",(0,t.jsx)(a.p,{children:"Defined in: packages/graphql/src/relation.ts:296"}),"\n",(0,t.jsx)(a.p,{children:"Returns a map of interfaces where the GraphQL schema type is extended."}),"\n",(0,t.jsx)(a.h3,{id:"see-3",children:"See"}),"\n",(0,t.jsx)(a.p,{children:"mapRelationOf"}),"\n",(0,t.jsx)(a.h3,{id:"type-param-4",children:"Type Param"}),"\n",(0,t.jsx)(a.p,{children:"the type of the GraphQL schema type."}),"\n",(0,t.jsx)(a.h3,{id:"type-param-5",children:"Type Param"}),"\n",(0,t.jsx)(a.p,{children:"the return type of map of relations (see IGetRelation)."}),"\n",(0,t.jsx)(a.h3,{id:"param-4",children:"Param"}),"\n",(0,t.jsx)(a.p,{children:"the GraphQL schema type being processed."}),"\n",(0,t.jsx)(a.h3,{id:"param-5",children:"Param"}),"\n",(0,t.jsxs)(a.p,{children:["a GraphQL schema map (see ",(0,t.jsx)(a.a,{href:"/api/graphql/introspection#getschemamap",children:"introspection!getSchemaMap"}),")."]}),"\n",(0,t.jsx)(a.h3,{id:"returns-2",children:"Returns"}),"\n",(0,t.jsx)(a.p,{children:"a record map of interfaces relations."}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"getrelationofreturn",children:"getRelationOfReturn"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-ts",children:"const getRelationOfReturn: IGetRelation<GraphQLOperationType>;\n"})}),"\n",(0,t.jsx)(a.p,{children:"Defined in: packages/graphql/src/relation.ts:106"}),"\n",(0,t.jsx)(a.p,{children:"Returns a map of operations (queries, mutations, subscriptions) where the GraphQL schema type is the return type."}),"\n",(0,t.jsx)(a.h3,{id:"see-4",children:"See"}),"\n",(0,t.jsx)(a.p,{children:"mapRelationOf"}),"\n",(0,t.jsx)(a.h3,{id:"type-param-6",children:"Type Param"}),"\n",(0,t.jsx)(a.p,{children:"the type of the GraphQL schema type."}),"\n",(0,t.jsx)(a.h3,{id:"type-param-7",children:"Type Param"}),"\n",(0,t.jsx)(a.p,{children:"the return type of map of relations (see IGetRelation)."}),"\n",(0,t.jsx)(a.h3,{id:"param-6",children:"Param"}),"\n",(0,t.jsx)(a.p,{children:"the GraphQL schema type being processed."}),"\n",(0,t.jsx)(a.h3,{id:"param-7",children:"Param"}),"\n",(0,t.jsxs)(a.p,{children:["a GraphQL schema map (see ",(0,t.jsx)(a.a,{href:"/api/graphql/introspection#getschemamap",children:"introspection!getSchemaMap"}),")."]}),"\n",(0,t.jsx)(a.h3,{id:"returns-3",children:"Returns"}),"\n",(0,t.jsx)(a.p,{children:"a record map of operations relations."}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsx)(a.h2,{id:"getrelationofunion",children:"getRelationOfUnion"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-ts",children:"const getRelationOfUnion: IGetRelation<GraphQLUnionType>;\n"})}),"\n",(0,t.jsx)(a.p,{children:"Defined in: packages/graphql/src/relation.ts:240"}),"\n",(0,t.jsx)(a.p,{children:"Returns a map of unions where the GraphQL schema type is part of it."}),"\n",(0,t.jsx)(a.h3,{id:"see-5",children:"See"}),"\n",(0,t.jsx)(a.p,{children:"mapRelationOf"}),"\n",(0,t.jsx)(a.h3,{id:"type-param-8",children:"Type Param"}),"\n",(0,t.jsx)(a.p,{children:"the type of the GraphQL schema type."}),"\n",(0,t.jsx)(a.h3,{id:"type-param-9",children:"Type Param"}),"\n",(0,t.jsx)(a.p,{children:"the return type of map of relations (see IGetRelation)."}),"\n",(0,t.jsx)(a.h3,{id:"param-8",children:"Param"}),"\n",(0,t.jsx)(a.p,{children:"the GraphQL schema type being processed."}),"\n",(0,t.jsx)(a.h3,{id:"param-9",children:"Param"}),"\n",(0,t.jsxs)(a.p,{children:["a GraphQL schema map (see ",(0,t.jsx)(a.a,{href:"/api/graphql/introspection#getschemamap",children:"introspection!getSchemaMap"}),")."]}),"\n",(0,t.jsx)(a.h3,{id:"returns-4",children:"Returns"}),"\n",(0,t.jsx)(a.p,{children:"a record map of unions relations."})]})}function o(e={}){let{wrapper:a}={...(0,i.a)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},50065:function(e,a,n){n.d(a,{Z:function(){return s},a:function(){return l}});var r=n(67294);let t={},i=r.createContext(t);function l(e){let a=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:a},e.children)}}}]);