"use strict";(self.webpackChunk_graphql_markdown_website=self.webpackChunk_graphql_markdown_website||[]).push([["1568"],{35886:function(n,e,i){i.r(e),i.d(e,{default:()=>h,frontMatter:()=>s,metadata:()=>o,assets:()=>l,toc:()=>d,contentTitle:()=>a});var o=JSON.parse('{"id":"core/graphql-config","title":"graphql-config","description":"GraphQL Markdown configuration utilities","source":"@site/api/core/graphql-config.md","sourceDirName":"core","slug":"/core/graphql-config","permalink":"/api/core/graphql-config","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"graphql-config","pagination_prev":null,"pagination_next":null,"toc_max_heading_level":2},"sidebar":"defaultSidebar"}'),r=i("85893"),t=i("50065");let s={title:"graphql-config",pagination_prev:null,pagination_next:null,toc_max_heading_level:2},a=void 0,l={},d=[{value:"EXTENSION_NAME",id:"extension_name",level:2},{value:"graphQLConfigExtension",id:"graphqlconfigextension",level:2},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:3},{value:"loadConfiguration()",id:"loadconfiguration",level:2},{value:"Parameters",id:"parameters",level:3},{value:"id",id:"id",level:4},{value:"options?",id:"options",level:4},{value:"throwOptions?",id:"throwoptions",level:4},{value:"Returns",id:"returns-1",level:3},{value:"Throws",id:"throws",level:3},{value:"Example",id:"example-1",level:3},{value:"setLoaderOptions()",id:"setloaderoptions",level:2},{value:"Parameters",id:"parameters-1",level:3},{value:"loaders",id:"loaders",level:4},{value:"options",id:"options-1",level:4},{value:"Returns",id:"returns-2",level:3},{value:"Example",id:"example-2",level:3}];function c(n){let e={code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",p:"p",pre:"pre",...(0,t.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:"GraphQL Markdown configuration utilities"}),"\n",(0,r.jsx)(e.p,{children:"This module provides utilities for loading and processing GraphQL configuration\nusing the graphql-config package."}),"\n",(0,r.jsx)(e.h2,{id:"extension_name",children:"EXTENSION_NAME"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:'const EXTENSION_NAME: "graphql-markdown";\n'})}),"\n",(0,r.jsx)(e.p,{children:"Defined in: graphql-config.ts:25"}),"\n",(0,r.jsx)(e.p,{children:"The name of the GraphQL Markdown extension.\nUsed to identify the extension in graphql-config."}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"graphqlconfigextension",children:"graphQLConfigExtension"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"const graphQLConfigExtension: GraphQLExtensionDeclaration;\n"})}),"\n",(0,r.jsx)(e.p,{children:"Defined in: graphql-config.ts:40"}),"\n",(0,r.jsx)(e.p,{children:"GraphQL extension declaration for graphql-config."}),"\n",(0,r.jsx)(e.h3,{id:"returns",children:"Returns"}),"\n",(0,r.jsx)(e.p,{children:"The extension configuration object with name property."}),"\n",(0,r.jsx)(e.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// In graphql-config setup\nconst config = await loadConfig({\n  extensions: [graphQLConfigExtension],\n});\n"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"loadconfiguration",children:"loadConfiguration()"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"function loadConfiguration(\n   id, \n   options?, \nthrowOptions?): Promise<Maybe<Readonly<ExtensionProjectConfig>>>;\n"})}),"\n",(0,r.jsx)(e.p,{children:"Defined in: graphql-config.ts:127"}),"\n",(0,r.jsx)(e.p,{children:"Loads the GraphQL Markdown configuration from graphql-config."}),"\n",(0,r.jsx)(e.p,{children:"This function attempts to load the GraphQL config and extract the\nGraphQL Markdown extension configuration for the specified project ID.\nIt also normalizes schema configurations."}),"\n",(0,r.jsx)(e.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(e.h4,{id:"id",children:"id"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"Maybe"}),"<",(0,r.jsx)(e.code,{children:"string"}),">"]}),"\n",(0,r.jsx)(e.p,{children:"The project ID to load configuration for."}),"\n",(0,r.jsx)(e.h4,{id:"options",children:"options?"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"Maybe"}),"<",(0,r.jsx)(e.code,{children:"PackageOptionsConfig"}),">"]}),"\n",(0,r.jsx)(e.p,{children:"Optional package options to apply."}),"\n",(0,r.jsx)(e.h4,{id:"throwoptions",children:"throwOptions?"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"ThrowOptions"})," = ",(0,r.jsx)(e.code,{children:"..."})]}),"\n",(0,r.jsx)(e.p,{children:"Options for controlling throw behavior."}),"\n",(0,r.jsx)(e.h3,{id:"returns-1",children:"Returns"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"Promise"}),"<",(0,r.jsx)(e.code,{children:"Maybe"}),"<",(0,r.jsx)(e.code,{children:"Readonly"}),"<",(0,r.jsx)(e.code,{children:"ExtensionProjectConfig"}),">>>"]}),"\n",(0,r.jsx)(e.p,{children:"The extension project configuration if found, otherwise undefined."}),"\n",(0,r.jsx)(e.h3,{id:"throws",children:"Throws"}),"\n",(0,r.jsx)(e.p,{children:"Will throw an error if throwOnMissing or throwOnEmpty is true and\nthe corresponding condition is met."}),"\n",(0,r.jsx)(e.h3,{id:"example-1",children:"Example"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'// Basic usage\nconst config = await loadConfiguration("my-project");\n\n// With options and throw behavior\nconst config = await loadConfiguration(\n  "my-project",\n  { baseDir: "./src" },\n  { throwOnMissing: true, throwOnEmpty: false }\n);\n'})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"setloaderoptions",children:"setLoaderOptions()"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"function setLoaderOptions(loaders, options): LoaderOption;\n"})}),"\n",(0,r.jsx)(e.p,{children:"Defined in: graphql-config.ts:79"}),"\n",(0,r.jsx)(e.p,{children:"Sets loader options for GraphQL Markdown loaders."}),"\n",(0,r.jsx)(e.p,{children:"This function takes a LoaderOption object and merges the provided options\nwith any existing options for each loader."}),"\n",(0,r.jsx)(e.h3,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsx)(e.h4,{id:"loaders",children:"loaders"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.code,{children:"LoaderOption"})}),"\n",(0,r.jsx)(e.p,{children:"The loader configuration object."}),"\n",(0,r.jsx)(e.h4,{id:"options-1",children:"options"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.code,{children:"PackageOptionsConfig"})}),"\n",(0,r.jsx)(e.p,{children:"The package options to apply to loaders."}),"\n",(0,r.jsx)(e.h3,{id:"returns-2",children:"Returns"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.code,{children:"LoaderOption"})}),"\n",(0,r.jsx)(e.p,{children:"The updated loader configuration."}),"\n",(0,r.jsx)(e.h3,{id:"example-2",children:"Example"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'const loaders = {\n  TypeScriptLoader: {\n    module: "@graphql-markdown/typescript-loader",\n    options: { baseDir: "./src" }\n  }\n};\nconst options = { outputDir: "./docs" };\nconst updatedLoaders = setLoaderOptions(loaders, options);\n// Result: loaders with { baseDir: "./src", outputDir: "./docs" }\n'})})]})}function h(n={}){let{wrapper:e}={...(0,t.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},50065:function(n,e,i){i.d(e,{Z:function(){return a},a:function(){return s}});var o=i(67294);let r={},t=o.createContext(r);function s(n){let e=o.useContext(t);return o.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),o.createElement(t.Provider,{value:e},n.children)}}}]);