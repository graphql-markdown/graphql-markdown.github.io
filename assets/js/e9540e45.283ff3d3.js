"use strict";(self.webpackChunk_graphql_markdown_website=self.webpackChunk_graphql_markdown_website||[]).push([[7514],{35465:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>t,metadata:()=>l,toc:()=>h});var r=a(74848),i=a(28453);const t={title:"relation",pagination_prev:null,pagination_next:null,toc_max_heading_level:2},s=void 0,l={id:"graphql/relation",title:"relation",description:"Library supporting relatedTypeSection for displaying relations between GraphQL schema entities.",source:"@site/api/graphql/relation.md",sourceDirName:"graphql",slug:"/graphql/relation",permalink:"/api/graphql/relation",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"relation",pagination_prev:null,pagination_next:null,toc_max_heading_level:2},sidebar:"defaultSidebar"},c={},h=[{value:"See",id:"see",level:2},{value:"getRelationOfField()",id:"getrelationoffield",level:2},{value:"Parameters",id:"parameters",level:3},{value:"type",id:"type",level:4},{value:"schemaMap",id:"schemamap",level:4},{value:"Returns",id:"returns",level:3},{value:"See",id:"see-1",level:3},{value:"getRelationOfImplementation()",id:"getrelationofimplementation",level:2},{value:"Parameters",id:"parameters-1",level:3},{value:"type",id:"type-1",level:4},{value:"schemaMap",id:"schemamap-1",level:4},{value:"Returns",id:"returns-1",level:3},{value:"See",id:"see-2",level:3},{value:"getRelationOfInterface()",id:"getrelationofinterface",level:2},{value:"Parameters",id:"parameters-2",level:3},{value:"type",id:"type-2",level:4},{value:"schemaMap",id:"schemamap-2",level:4},{value:"Returns",id:"returns-2",level:3},{value:"See",id:"see-3",level:3},{value:"getRelationOfReturn()",id:"getrelationofreturn",level:2},{value:"Parameters",id:"parameters-3",level:3},{value:"type",id:"type-3",level:4},{value:"schemaMap",id:"schemamap-3",level:4},{value:"Returns",id:"returns-3",level:3},{value:"See",id:"see-4",level:3},{value:"getRelationOfUnion()",id:"getrelationofunion",level:2},{value:"Parameters",id:"parameters-4",level:3},{value:"type",id:"type-4",level:4},{value:"schemaMap",id:"schemamap-4",level:4},{value:"Returns",id:"returns-4",level:3},{value:"See",id:"see-5",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Library supporting ",(0,r.jsx)(n.code,{children:"relatedTypeSection"})," for displaying relations between GraphQL schema entities."]}),"\n",(0,r.jsx)(n.h2,{id:"see",children:"See"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://graphql-markdown.dev/docs/settings#printtypeoptions",children:"Option `relatedTypeSection`"})}),"\n",(0,r.jsx)(n.h2,{id:"getrelationoffield",children:"getRelationOfField()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function getRelationOfField(type, schemaMap): Partial<Record<SchemaEntity, RelationOfField[]>>\n"})}),"\n",(0,r.jsx)(n.p,{children:"Defined in: packages/graphql/src/relation.ts:167"}),"\n",(0,r.jsx)(n.p,{children:"Returns a map of fields and arguments where the GraphQL schema type matches the type."}),"\n",(0,r.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(n.h4,{id:"type",children:"type"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"unknown"})}),"\n",(0,r.jsx)(n.p,{children:"the GraphQL schema type being processed."}),"\n",(0,r.jsx)(n.h4,{id:"schemamap",children:"schemaMap"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Maybe"}),"<",(0,r.jsx)(n.code,{children:"SchemaMap"}),">"]}),"\n",(0,r.jsxs)(n.p,{children:["a GraphQL schema map (see ",(0,r.jsx)(n.a,{href:"/api/graphql/introspection#getschemamap",children:"introspection!getSchemaMap"}),")."]}),"\n",(0,r.jsx)(n.h3,{id:"returns",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Partial"}),"<",(0,r.jsx)(n.code,{children:"Record"}),"<",(0,r.jsx)(n.code,{children:"SchemaEntity"}),", ",(0,r.jsx)(n.code,{children:"RelationOfField"}),"[]>>"]}),"\n",(0,r.jsx)(n.p,{children:"a record map of fields and arguments relations."}),"\n",(0,r.jsx)(n.h3,{id:"see-1",children:"See"}),"\n",(0,r.jsx)(n.p,{children:"mapRelationOf"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"getrelationofimplementation",children:"getRelationOfImplementation()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function getRelationOfImplementation(type, schemaMap): Partial<Record<SchemaEntity, RelationOfImplementation[]>>\n"})}),"\n",(0,r.jsx)(n.p,{children:"Defined in: packages/graphql/src/relation.ts:353"}),"\n",(0,r.jsx)(n.p,{children:"Returns a map of types (unions or interfaces) where the GraphQL schema type is implemented."}),"\n",(0,r.jsx)(n.h3,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsx)(n.h4,{id:"type-1",children:"type"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"unknown"})}),"\n",(0,r.jsx)(n.p,{children:"the GraphQL schema type being processed."}),"\n",(0,r.jsx)(n.h4,{id:"schemamap-1",children:"schemaMap"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Maybe"}),"<",(0,r.jsx)(n.code,{children:"SchemaMap"}),">"]}),"\n",(0,r.jsxs)(n.p,{children:["a GraphQL schema map (see ",(0,r.jsx)(n.a,{href:"/api/graphql/introspection#getschemamap",children:"introspection!getSchemaMap"}),")."]}),"\n",(0,r.jsx)(n.h3,{id:"returns-1",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Partial"}),"<",(0,r.jsx)(n.code,{children:"Record"}),"<",(0,r.jsx)(n.code,{children:"SchemaEntity"}),", ",(0,r.jsx)(n.code,{children:"RelationOfImplementation"}),"[]>>"]}),"\n",(0,r.jsx)(n.p,{children:"a record map of unions or interfaces relations."}),"\n",(0,r.jsx)(n.h3,{id:"see-2",children:"See"}),"\n",(0,r.jsx)(n.p,{children:"mapRelationOf"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"getrelationofinterface",children:"getRelationOfInterface()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function getRelationOfInterface(type, schemaMap): Partial<Record<SchemaEntity, RelationOfInterface[]>>\n"})}),"\n",(0,r.jsx)(n.p,{children:"Defined in: packages/graphql/src/relation.ts:296"}),"\n",(0,r.jsx)(n.p,{children:"Returns a map of interfaces where the GraphQL schema type is extended."}),"\n",(0,r.jsx)(n.h3,{id:"parameters-2",children:"Parameters"}),"\n",(0,r.jsx)(n.h4,{id:"type-2",children:"type"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"unknown"})}),"\n",(0,r.jsx)(n.p,{children:"the GraphQL schema type being processed."}),"\n",(0,r.jsx)(n.h4,{id:"schemamap-2",children:"schemaMap"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Maybe"}),"<",(0,r.jsx)(n.code,{children:"SchemaMap"}),">"]}),"\n",(0,r.jsxs)(n.p,{children:["a GraphQL schema map (see ",(0,r.jsx)(n.a,{href:"/api/graphql/introspection#getschemamap",children:"introspection!getSchemaMap"}),")."]}),"\n",(0,r.jsx)(n.h3,{id:"returns-2",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Partial"}),"<",(0,r.jsx)(n.code,{children:"Record"}),"<",(0,r.jsx)(n.code,{children:"SchemaEntity"}),", ",(0,r.jsx)(n.code,{children:"RelationOfInterface"}),"[]>>"]}),"\n",(0,r.jsx)(n.p,{children:"a record map of interfaces relations."}),"\n",(0,r.jsx)(n.h3,{id:"see-3",children:"See"}),"\n",(0,r.jsx)(n.p,{children:"mapRelationOf"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"getrelationofreturn",children:"getRelationOfReturn()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function getRelationOfReturn(type, schemaMap): Partial<Record<SchemaEntity, GraphQLOperationType[]>>\n"})}),"\n",(0,r.jsx)(n.p,{children:"Defined in: packages/graphql/src/relation.ts:106"}),"\n",(0,r.jsx)(n.p,{children:"Returns a map of operations (queries, mutations, subscriptions) where the GraphQL schema type is the return type."}),"\n",(0,r.jsx)(n.h3,{id:"parameters-3",children:"Parameters"}),"\n",(0,r.jsx)(n.h4,{id:"type-3",children:"type"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"unknown"})}),"\n",(0,r.jsx)(n.p,{children:"the GraphQL schema type being processed."}),"\n",(0,r.jsx)(n.h4,{id:"schemamap-3",children:"schemaMap"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Maybe"}),"<",(0,r.jsx)(n.code,{children:"SchemaMap"}),">"]}),"\n",(0,r.jsxs)(n.p,{children:["a GraphQL schema map (see ",(0,r.jsx)(n.a,{href:"/api/graphql/introspection#getschemamap",children:"introspection!getSchemaMap"}),")."]}),"\n",(0,r.jsx)(n.h3,{id:"returns-3",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Partial"}),"<",(0,r.jsx)(n.code,{children:"Record"}),"<",(0,r.jsx)(n.code,{children:"SchemaEntity"}),", ",(0,r.jsx)(n.code,{children:"GraphQLOperationType"}),"[]>>"]}),"\n",(0,r.jsx)(n.p,{children:"a record map of operations relations."}),"\n",(0,r.jsx)(n.h3,{id:"see-4",children:"See"}),"\n",(0,r.jsx)(n.p,{children:"mapRelationOf"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"getrelationofunion",children:"getRelationOfUnion()"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function getRelationOfUnion(type, schemaMap): Partial<Record<SchemaEntity, GraphQLUnionType[]>>\n"})}),"\n",(0,r.jsx)(n.p,{children:"Defined in: packages/graphql/src/relation.ts:240"}),"\n",(0,r.jsx)(n.p,{children:"Returns a map of unions where the GraphQL schema type is part of it."}),"\n",(0,r.jsx)(n.h3,{id:"parameters-4",children:"Parameters"}),"\n",(0,r.jsx)(n.h4,{id:"type-4",children:"type"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"unknown"})}),"\n",(0,r.jsx)(n.p,{children:"the GraphQL schema type being processed."}),"\n",(0,r.jsx)(n.h4,{id:"schemamap-4",children:"schemaMap"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Maybe"}),"<",(0,r.jsx)(n.code,{children:"SchemaMap"}),">"]}),"\n",(0,r.jsxs)(n.p,{children:["a GraphQL schema map (see ",(0,r.jsx)(n.a,{href:"/api/graphql/introspection#getschemamap",children:"introspection!getSchemaMap"}),")."]}),"\n",(0,r.jsx)(n.h3,{id:"returns-4",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Partial"}),"<",(0,r.jsx)(n.code,{children:"Record"}),"<",(0,r.jsx)(n.code,{children:"SchemaEntity"}),", ",(0,r.jsx)(n.code,{children:"GraphQLUnionType"}),"[]>>"]}),"\n",(0,r.jsx)(n.p,{children:"a record map of unions relations."}),"\n",(0,r.jsx)(n.h3,{id:"see-5",children:"See"}),"\n",(0,r.jsx)(n.p,{children:"mapRelationOf"})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>l});var r=a(96540);const i={},t=r.createContext(i);function s(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);